<entities>
	<gnatprep file="posix.defs">
		<define symbol="POSIX_FAMILY"   string="%family"/>
		<define symbol="POSIX_PLATFORM" string="%platform"/>
		<define symbol="POSIX_MACHINE"  string="%machine"/>
		<define symbol="POSIX_VERSION" string="%version"/>
	</gnatprep>
	<copies>
		<copy name="0005.ads"/>
		<copy name="0005.adb"/>
		<copy name="0060.ads"/>
		<copy name="0077.ads"/>
		<copy name="0690.ads"/>
		<copy name="8000.ads"/>
		<copy name="9900.ads"/>
		<copy name="9999.ads"/>
		<copy name="9999.adb"/>
	</copies>
	<builtin_types>
		<builtin type="__builtin_va_list" os="Darwin *"/>
		<builtin type="__builtin_va_list" os="FreeBSD *"/>
	</builtin_types>
	<basic_types genset="50">
		<type name="char" ada="char_t"/>
		<type name="short" ada="short_t"/>
		<type name="int" ada="int_t"/>
		<type name="long" ada="long_t"/>
		<type name="long long" ada="llong_t"/>
	<!--	<type name="void*"/>  -->
	</basic_types>
	<posix_types genset="75">
		<includes>
			<include file="stdint.h"/>
			<include file="time.h"/>
			<include file="sys/times.h"/>
			<include file="sys/utsname.h"/>
			<include file="unistd.h"/>
			<include file="sys/types.h"/>
			<include file="sys/stat.h"/>
			<include file="sys/uio.h"/>
			<include file="sys/ptrace.h"/>
			<include file="sys/param.h"/>
			<include file="signal.h"/>
			<include file="sys/resource.h"/>
		</includes>
		<type name="off_t"/>
		<type name="size_t"/>
		<type name="ssize_t"/>
		<type name="mode_t"/>
		<type name="uid_t"/>
		<type name="gid_t"/>
		<type name="pid_t"/>
		<type name="id_t"/>
		<type name="time_t"/>
		<type name="dev_t"/>
		<type name="nlink_t"/>
		<type name="blkcnt_t"/>
		<type name="blksize_t"/>
		<type name="sig_t"/>
		<type name="clock_t"/>
		<type name="ino64_t" os="Darwin 12.*.*"/>
		<type name="ino64_t" os="Darwin 13.*.*"/>
		<type name="sigset_t" os="Darwin *"/>
		<type name="rlim_t"/>
		<type name="key_t" os="Linux *"/>
	</posix_types>
	<ada_types genset="105">
		<type name="fd_t" type="int_t" range="-1..int_t'Last"/>
	</ada_types>
	<macro_constants>
		<set type="errno_t" format="%ld" genset="110">
			<includes>
				<include file="errno.h" os="Darwin 13.*.*"/>
				<include file="errno.h"/>
			</includes>
			<macro name="EPERM"/>
			<macro name="ENOENT"/>
			<macro name="ESRCH"/>
			<macro name="EINTR"/>
			<macro name="EIO"/>
			<macro name="ENXIO"/>
			<macro name="E2BIG"/>
			<macro name="ENOEXEC"/>
			<macro name="EBADF"/>
			<macro name="ECHILD"/>
			<macro name="EDEADLK"/>
			<macro name="ENOMEM"/>
			<macro name="EACCES"/>
			<macro name="EFAULT"/>
			<macro name="ENOTBLK"/>
			<macro name="EBUSY"/>
			<macro name="EEXIST"/>
			<macro name="EXDEV"/>
			<macro name="ENODEV"/>
			<macro name="ENOTDIR"/>
			<macro name="EISDIR"/>
			<macro name="EINVAL"/>
			<macro name="ENFILE"/>
			<macro name="EMFILE"/>
			<macro name="ENOTTY"/>
			<macro name="ETXTBSY"/>
			<macro name="EFBIG"/>
			<macro name="ENOSPC"/>
			<macro name="ESPIPE"/>
			<macro name="EROFS"/>
			<macro name="EMLINK"/>
			<macro name="EPIPE"/>
			<macro name="EDOM"/>
			<macro name="ERANGE"/>
			<macro name="EAGAIN"/>
			<macro name="EWOULDBLOCK"/>
			<macro name="EINPROGRESS"/>
			<macro name="EALREADY"/>
			<macro name="ENOTSOCK"/>
			<macro name="EDESTADDRREQ"/>
			<macro name="EMSGSIZE"/>
			<macro name="EPROTOTYPE"/>
			<macro name="ENOPROTOOPT"/>
			<macro name="EPROTONOSUPPORT"/>
			<macro name="ESOCKTNOSUPPORT"/>
			<macro name="ENOTSUP"/>
			<macro name="EOPNOTSUPP"/>
			<macro name="EPFNOSUPPORT"/>
			<macro name="EAFNOSUPPORT"/>
			<macro name="EADDRINUSE"/>
			<macro name="EADDRNOTAVAIL"/>
			<macro name="ENETDOWN"/>
			<macro name="ENETUNREACH"/>
			<macro name="ENETRESET"/>
			<macro name="ECONNABORTED"/>
			<macro name="ECONNRESET"/>
			<macro name="ENOBUFS"/>
			<macro name="EISCONN"/>
			<macro name="ENOTCONN"/>
			<macro name="ESHUTDOWN"/>
			<macro name="ETOOMANYREFS"/>
			<macro name="ETIMEDOUT"/>
			<macro name="ECONNREFUSED"/>
			<macro name="ELOOP"/>
			<macro name="ENAMETOOLONG"/>
			<macro name="EHOSTDOWN"/>
			<macro name="EHOSTUNREACH"/>
			<macro name="ENOTEMPTY"/>
			<macro name="EPROCLIM"/>
			<macro name="EUSERS"/>
			<macro name="EDQUOT"/>
			<macro name="ESTALE"/>
			<macro name="EREMOTE"/>
			<macro name="EBADRPC"/>
			<macro name="ERPCMISMATCH"/>
			<macro name="EPROGUNAVAIL"/>
			<macro name="EPROGMISMATCH"/>
			<macro name="EPROCUNAVAIL"/>
			<macro name="ENOLCK"/>
			<macro name="ENOSYS"/>
			<macro name="EFTYPE"/>
			<macro name="EAUTH"/>
			<macro name="ENEEDAUTH"/>
			<macro name="EPWROFF"/>
			<macro name="EDEVERR"/>
			<macro name="EOVERFLOW"/>
			<macro name="EBADEXEC"/>
			<macro name="EBADARCH"/>
			<macro name="ESHLIBVERS"/>
			<macro name="EBADMACHO"/>
			<macro name="ECANCELED"/>
			<macro name="EIDRM"/>
			<macro name="ENOMSG"/>
			<macro name="EILSEQ"/>
			<macro name="ENOATTR"/>
			<macro name="EBADMSG"/>
			<macro name="EMULTIHOP"/>
			<macro name="ENODATA"/>
			<macro name="ENOLINK"/>
			<macro name="ENOSR"/>
			<macro name="ENOSTR"/>
			<macro name="EPROTO"/>
			<macro name="ETIME"/>
			<macro name="ENOPOLICY"/>
			<macro name="ENOTRECOVERABLE"/>
			<macro name="EOWNERDEAD"/>
			<macro name="ELAST"/>
		</set>
		<set type="fcntl_t" genset="120">
			<includes>
				<include file="fcntl.h"/>
			</includes>
			<macro name="F_DUPFD"/>
			<macro name="F_DUPFD_CLOEXEC"/>
			<macro name="F_GETFD"/>
			<macro name="F_SETFD"/>
			<macro name="F_GETFL"/>
			<macro name="F_SETFL"/>
			<macro name="F_GETOWN"/>
			<macro name="F_SETOWN"/>
                        <macro name="F_GETSIG"/>
                        <macro name="F_SETSIG"/>
			<macro name="F_GETPATH"/>
			<macro name="F_PREALLOCATE"/>
			<macro name="F_SETSIZE"/>
			<macro name="F_RDADVISE"/>
			<macro name="F_RDAHEAD"/>
			<macro name="F_NOCACHE"/>
			<macro name="F_LOG2PHYS"/>
			<macro name="F_LOG2PHYS_EXT"/>
			<macro name="F_FULLFSYNC"/>
			<macro name="F_SETNOSIGPIPE"/>
			<macro name="F_GETNOSIGPIPE"/>
			<macro name="F_GETLK"/>
			<macro name="F_SETLK"/>
			<macro name="F_SETLKW"/>
			<macro name="F_ALLOCATECONTIG"/>
			<macro name="F_ALLOCATEALL"/>
		</set>
                <set type="" genset="125">
			<includes>
				<include file="fcntl.h"/>
			</includes>
			<macro name="F_RDLCK"/>
			<macro name="F_WRLCK"/>
			<macro name="F_UNLCK"/>
		</set>
		<set type="" genset="130">
			<includes>
				<include file="sys/wait.h"/>
			</includes>
			<macro name="WNOHANG"/>
			<macro name="WUNTRACED"/>
			<macro name="WCONTINUED"/>
		</set>
		<set type = "" genset="140" format="8#%06o#">
			<includes>
				<include file="sys/stat.h"/>
			</includes>
			<macro name="S_IRWXU"/>
			<macro name="S_IRUSR"/>
			<macro name="S_IWUSR"/>
			<macro name="S_IXUSR"/>
			<macro name="S_IRWXG"/>
			<macro name="S_IRGRP"/>
			<macro name="S_IWGRP"/>
			<macro name="S_IXGRP"/>
			<macro name="S_IRWXO"/>
			<macro name="S_IROTH"/>
			<macro name="S_IWOTH"/>
			<macro name="S_IXOTH"/>
			<macro name="S_ISUID"/>
			<macro name="S_ISGID"/>
			<macro name="S_ISVTX"/>
			<macro name="S_IFMT"/>
			<macro name="S_IFSOCK"/>
			<macro name="S_IFLNK"/>
			<macro name="S_IFREG"/>
			<macro name="S_IFBLK"/>
			<macro name="S_IFDIR"/>
			<macro name="S_IFCHR"/>
			<macro name="S_IFIFO"/>
		</set>
		<set type="uchar_t" genset="143" format="%d">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
			<macro name="DT_REG"/>
			<macro name="DT_BLK"/>
			<macro name="DT_CHR"/>
			<macro name="DT_DIR"/>
			<macro name="DT_FIFO"/>
			<macro name="DT_LABEL"/>
			<macro name="DT_LNK"/>
			<macro name="DT_SOCK"/>
			<macro name="DT_UNKNOWN"/>
		</set>
		<set type="prio_t" genset="145" format="16#%08X#">
			<includes>
				<include file="sys/resource.h"/>
			</includes>
			<macro name="PRIO_PROCESS"/>
			<macro name="PRIO_PGRP"/>
			<macro name="PRIO_USER"/>
			<macro name="PRIO_DARWIN_THREAD"/>
			<macro name="PRIO_DARWIN_PROCESS"/>
			<macro name="PRIO_DARWIN_BG"/>
		</set>
		<set type="whence_t" genset="150">
			<macro name="SEEK_SET"/>
			<macro name="SEEK_CUR"/>
			<macro name="SEEK_END"/>
		</set>
		<set type="mntflags_t" genset="160" format="16#%08X#">
			<includes>
				<include file="sys/param.h"/>
				<include file="sys/mount.h"/>
			</includes>
			<macro name="MS_BIND"/>
			<macro name="MS_DIRSYNC"/>
			<macro name="MS_MANDLOCK"/>
			<macro name="MS_MOVE"/>
			<macro name="MS_NOATIME"/>
			<macro name="MS_NODEV"/>
			<macro name="MS_NODIRATIME"/>
			<macro name="MS_NOEXEC"/>
			<macro name="MS_NOSUID"/>
			<macro name="MS_RDONLY"/>
			<macro name="MS_RELATIME"/>
			<macro name="MS_REMOUNT"/>
			<macro name="MS_SILENT"/>
			<macro name="MS_STRICTATIME"/>
			<macro name="MS_SYNCHRONOUS"/>
			<macro name="MNT_FORCE"/>
			<macro name="MNT_DETACH"/>
			<macro name="MNT_EXPIRE"/>
			<macro name="MNT_RDONLY"/>
			<macro name="MNT_NOEXEC"/>
			<macro name="MNT_NOSUID"/>
			<macro name="MNT_NODEV"/>
			<macro name="MNT_UNION"/>
			<macro name="MNT_SYNCHRONOUS"/>
			<macro name="MNT_UPDATE"/>
			<macro name="MNT_RELOAD"/>
			<macro name="UMOUNT_NOFOLOW"/>
		</set>
		<set type="ptrace_t" genset="170">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ptrace.h"/>
			</includes>
			<macro name="PT_TRACE_ME"/>
			<macro name="PT_DENY_ATTACH"/>
			<macro name="PT_CONTINUE"/>
			<macro name="PT_STEP"/>
			<macro name="PT_KILL"/>
			<macro name="PT_ATTACH"/>
			<macro name="PT_DETACH"/>
		</set>
		<set type="amode_t" genset="180">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<macro name="R_OK"/>
			<macro name="W_OK"/>
			<macro name="F_OK"/>
		</set>
		<set type="sig_t" genset="190">
			<includes>
				<include file="signal.h"/>
			</includes>
			<macro name="SIGHUP"/>
			<macro name="SIGINT"/>
			<macro name="SIGQUIT"/>
			<macro name="SIGILL"/>
			<macro name="SIGTRAP"/>
			<macro name="SIGABRT"/>
			<macro name="SIGPOLL"/>
			<macro name="SIGIOT"/>
			<macro name="SIGEMT"/>
			<macro name="SIGFPE"/>
			<macro name="SIGKILL"/>
			<macro name="SIGBUS"/>
			<macro name="SIGSEGV"/>
			<macro name="SIGSYS"/>
			<macro name="SIGPIPE"/>
			<macro name="SIGALRM"/>
			<macro name="SIGTERM"/>
			<macro name="SIGURG"/>
			<macro name="SIGSTOP"/>
			<macro name="SIGTSTP"/>
			<macro name="SIGCONT"/>
			<macro name="SIGCHLD"/>
			<macro name="SIGTTIN"/>
			<macro name="SIGTTOU"/>
			<macro name="SIGIO"/>
			<macro name="SIGXCPU"/>
			<macro name="SIGXFSZ"/>
			<macro name="SIGVTALRM"/>
			<macro name="SIGPROF"/>
			<macro name="SIGWINCH"/>
			<macro name="SIGINFO"/>
			<macro name="SIGUSR1"/>
			<macro name="SIGUSR2"/>
			<macro name="SIG_DFL"/>
			<macro name="SIG_IGN"/>
			<macro name="SIG_HOLD"/>
			<macro name="SIG_ERR"/>
		</set>
		<set type="sigpmop_t" genset="192">
			<includes>
				<include file="signal.h"/>
			</includes>
			<macro name="SIG_BLOCK"/>
			<macro name="SIG_UNBLOCK"/>
			<macro name="SIG_SETMASK"/>
		</set>
		<set type="" genset="200">
			<includes>
				<include file="sys/param.h"/>
			</includes>
			<macro name="MAXPATHLEN"/>
		</set>
		<set type="" genset="210">
			<includes>
				<include file="fcntl.h"/>
			</includes>
			<macro name="FD_CLOEXEC"/>
		</set>
		<set type="" genset="220">
			<includes>
				<include file="sys/utsname.h"/>
			</includes>
			<macro name="SYS_NAMELEN" alt="_SYS_NAMELEN"/>
		</set>
		<set type="" genset="230" format="16#%08X#">
			<includes>
				<include file="fcntl.h"/>
			</includes>
			<macro name="O_RDONLY" desc="Open for reading only"/>
			<macro name="O_WRONLY" desc="Open for writing only"/>
			<macro name="O_RDWR"  desc="Open for reading and writing"/>
			<macro name="O_NONBLOCK" desc="Do not block on open or for data to become available"/>
			<macro name="O_APPEND" desc="Append on each write"/>
			<macro name="O_CREAT" desc="Create file if it does not exist"/>
			<macro name="O_TRUNC" desc="Truncate size to 0"/>
			<macro name="O_EXCL" desc="Error if O_CREAT and the file exists"/>
			<macro name="O_SHLOCK" desc="Atomically obtain a shared lock"/>
			<macro name="O_EXLOCK" desc="Atomically obtain an exclusive lock"/>
			<macro name="O_NOFOLLOW" desc="Do not follow symlinks"/>
			<macro name="O_SYMLINK" desc="Allow open of symlinks"/>
			<macro name="O_EVTONLY" desc="Descriptor requested for event notifications only"/>
			<macro name="O_CLOEXEC" desc="Mark as close-on-exec"/>
                        <macro name="O_NOCTTY"/>
                        <macro name="O_ASYNC"/>
                        <macro name="O_DIRECT"/>
                        <macro name="O_NOATIME"/>
                        <macro name="O_NONBLOCK"/>
		</set>
		<set type="rlimkind_t" genset="240" format="16#%08X#">
			<includes>
				<include file="sys/resource.h"/>
			</includes>
			<macro name="RLIMIT_CORE"/>
			<macro name="RLIMIT_CPU"/>
			<macro name="RLIMIT_DATA"/>
			<macro name="RLIMIT_FSIZE"/>
			<macro name="RLIMIT_MEMLOCK"/>
			<macro name="RLIMIT_NOFILE"/>
			<macro name="RLIMIT_NPROC"/>
			<macro name="RLIMIT_RSS"/>
			<macro name="RLIMIT_STACK"/>
			<macro name="RLIMIT_AS"/>
			<macro name="RLIMIT_LOCKS"/>
			<macro name="RLIMIT_MSGQUEUE"/>
			<macro name="RLIMIT_NICE"/>
			<macro name="RLIMIT_RTPRIO"/>
			<macro name="RLIMIT_RTTIME"/>
			<macro name="RLIMIT_SIGPENDING"/>
		</set>
		<set type="rwho_t" genset="250" format="%d">
			<includes>
				<include file="sys/resource.h"/>
			</includes>
			<macro name="RUSAGE_SELF"/>
			<macro name="RUSAGE_CHILDREN"/>
		</set>
		<set type="" genset="260" format="%d">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<macro name="NGROUPS_MAX"/>
		</set>
		<set type="mprot_t" genset="270" format="16#%04X#">
			<includes>
				<include file="sys/mman.h"/>
			</includes>
			<macro name="PROT_NONE" desc="Pages may not be accessed."/>
			<macro name="PROT_READ" desc="Pages may be read."/>
			<macro name="PROT_WRITE" desc="Pages may be written."/>
			<macro name="PROT_EXEC" desc="Pages may be executed."/>
		</set>
		<set type="mmap_t" genset="280" format="16#%08X#">
			<includes>
				<include file="sys/mman.h"/>
			</includes>
                        <macro name="MAP_ANON" desc="Map anonymous memory"/>
                        <macro name="MAP_FILE" desc="Mapped from a regular file"/>
                        <macro name="MAP_FIXED" desc="Do not permit the system to select a different address"/>
                        <macro name="MAP_HASSEMAPHORE" desc="Notify the kernel that the region may contain semaphore"/>
                        <macro name="MAP_PRIVATE" desc="Modifications are private (copy-on-write)"/>
                        <macro name="MAP_SHARED" desc="Modifications are shared"/>
                        <macro name="MAP_NOCACHE" desc="Pages in this mapping are not retained in the kernel's cache"/>
                        <macro name="MAP_SHARED" desc="Share this mapping.  Updates to the mapping are  visible"/>
                        <macro name="MAP_PRIVATE" desc="Create a private copy-on-write mapping."/>
                        <macro name="MAP_32BIT" desc="Put the mapping into the first 2 Gigabytes of the process"/>
                        <macro name="MAP_ANONYMOUS" desc="The mapping is not backed by any file"/>
                        <macro name="MAP_DENYWRITE" desc="This flag is ignored. Used long ago.."/>
                        <macro name="MAP_EXECUTABLE" desc="This flag is ignored"/>
                        <macro name="MAP_GROWSDOWN" desc="Used  for stacks"/>
                        <macro name="MAP_HUGETLB" desc="Allocate the mapping using 'huge pages.'"/>
                        <macro name="MAP_LOCKED" desc="Lock the pages of the mapped region into memory"/>
                        <macro name="MAP_NONBLOCK" desc="Only meaningful in conjunction with MAP_POPULATE"/>
                        <macro name="MAP_NORESERVE" desc="Do not reserve swap space for this mapping"/>
                        <macro name="MAP_POPULATE" desc="Populate (prefault) page tables for a mapping"/>
                        <macro name="MAP_STACK" desc="(since Linux 2.6.27)"/>
		</set>
		<set type="sysc_t" genset="290" format="%ld">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<macro name="ARG_MAX"/>
			<macro name="SC_ARG_MAX" alt="_SC_ARG_MAX"/>
			<macro name="CHILD_MAX"/>
			<macro name="SC_CHILD_MAX" alt="_SC_CHILD_MAX"/>
			<macro name="HOST_NAME_MAX"/>
			<macro name="SC_HOST_NAME_MAX" alt="_SC_HOST_NAME_MAX"/>
			<macro name="LOGIN_NAME_MAX"/>
			<macro name="SC_LOGIN_NAME_MAX" alt="_SC_LOGIN_NAME_MAX"/>
			<macro name="SC_CLK_TCK" alt="_SC_CLK_TCK"/>
			<macro name="OPEN_MAX"/>
			<macro name="SC_OPEN_MAX" alt="_SC_OPEN_MAX"/>
			<macro name="PAGESIZE"/>
			<macro name="SC_PAGESIZE" alt="_SC_PAGESIZE"/>
			<macro name="RE_DUP_MAX"/>
			<macro name="SC_RE_DUP_MAX" alt="_SC_RE_DUP_MAX"/>
			<macro name="STREAM_MAX"/>
			<macro name="SC_STREAM_MAX" alt="_SC_STREAM_MAX"/>
			<macro name="SYMLOOP_MAX"/>
			<macro name="TTY_NAME_MAX"/>
			<macro name="SC_TTY_NAME_MAX" alt="_SC_TTY_NAME_MAX"/>
			<macro name="TZNAME_MAX"/>
			<macro name="SC_TZNAME_MAX" alt="_SC_TZNAME_MAX"/>
			<macro name="POSIX_VERSION"/>
			<macro name="SC_VERSION" alt="_SC_VERSION"/>
			<macro name="BC_BASE_MAX"/>
			<macro name="SC_BC_BASE_MAX" alt="_SC_BC_BASE_MAX"/>
			<macro name="BC_DIM_MAX"/>
			<macro name="SC_BC_DIM_MAX" alt="_SC_BC_DIM_MAX"/>
			<macro name="BC_SCALE_MAX"/>
			<macro name="SC_BC_SCALE_MAX" alt="_SC_BC_SCALE_MAX"/>
			<macro name="BC_STRING_MAX"/>
			<macro name="SC_BC_STRING_MAX" alt="_SC_BC_STRING_MAX"/>
			<macro name="COLL_WEIGHTS_MAX"/>
			<macro name="SC_COLL_WEIGHTS_MAX" alt="_SC_COLL_WEIGHTS_MAX"/>
			<macro name="EXPR_NEST_MAX"/>
			<macro name="SC_EXPR_NEST_MAX" alt="_SC_EXPR_NEST_MAX"/>
			<macro name="LINE_MAX"/>
			<macro name="SC_LINE_MAX" alt="_SC_LINE_MAX"/>
			<macro name="RE_DUP_MAX"/>
			<macro name="SC_RE_DUP_MAX" alt="_SC_RE_DUP_MAX"/>
			<macro name="POSIX2_VERSION"/>
			<macro name="SC_2_VERSION" alt="_SC_2_VERSION"/>
			<macro name="POSIX2_C_DEV"/>
			<macro name="SC_2_C_DEV" alt="_SC_2_C_DEV"/>
			<macro name="POSIX2_FORT_DEV"/>
			<macro name="SC_2_FORT_DEV" alt="_SC_2_FORT_DEV"/>
			<macro name="POSIX2_FORT_RUN"/>
			<macro name="SC_2_FORT_RUN" alt="_SC_2_FORT_RUN"/>
			<macro name="POSIX2_LOCALEDEF" alt="_POSIX2_LOCALEDEF"/>
			<macro name="SC_2_LOCALEDEF" alt="_SC_2_LOCALEDEF"/>
			<macro name="POSIX2_SW_DEV"/>
			<macro name="SC_2_SW_DEV" alt="_SC_2_SW_DEV"/>
			<macro name="SC_PHYS_PAGES" alt="_SC_PHYS_PAGES"/>
			<macro name="SC_AVPHYS_PAGES" alt="_SC_AVPHYS_PAGES"/>
			<macro name="SC_NPROCESSORS_CONF" alt="_SC_NPROCESSORS_CONF"/>
			<macro name="SC_NPROCESSORS_ONLN" alt="_SC_NPROCESSORS_ONLN"/>
		</set>
		<set genset="295" format="16#%08X#" os="Linux *">
			<includes>
				<include file="sys/vfs.h"/>
			</includes>
			<macro name="ADFS_SUPER_MAGIC"/>
			<macro name="AFFS_SUPER_MAGIC"/>
			<macro name="BEFS_SUPER_MAGIC"/>
			<macro name="BFS_MAGIC"/>
			<macro name="CIFS_MAGIC_NUMBER"/>
			<macro name="CODA_SUPER_MAGIC"/>
			<macro name="COH_SUPER_MAGIC"/>
			<macro name="CRAMFS_MAGIC"/>
			<macro name="DEVFS_SUPER_MAGIC"/>
			<macro name="EFS_SUPER_MAGIC"/>
			<macro name="EXT_SUPER_MAGIC"/>
			<macro name="EXT2_OLD_SUPER_MAGIC"/>
			<macro name="EXT2_SUPER_MAGIC"/>
			<macro name="EXT3_SUPER_MAGIC"/>
			<macro name="HFS_SUPER_MAGIC"/>
			<macro name="HPFS_SUPER_MAGIC"/>
			<macro name="HUGETLBFS_MAGIC"/>
			<macro name="ISOFS_SUPER_MAGIC"/>
			<macro name="JFFS2_SUPER_MAGIC"/>
			<macro name="JFS_SUPER_MAGIC"/>
			<macro name="MINIX_SUPER_MAGIC"/>
			<macro name="MINIX_SUPER_MAGIC2"/>
			<macro name="MINIX2_SUPER_MAGIC"/>
			<macro name="MINIX2_SUPER_MAGIC2"/>
			<macro name="MSDOS_SUPER_MAGIC"/>
			<macro name="NCP_SUPER_MAGIC"/>
			<macro name="NFS_SUPER_MAGIC"/>
			<macro name="NTFS_SB_MAGIC"/>
			<macro name="OPENPROM_SUPER_MAGIC"/>
			<macro name="PROC_SUPER_MAGIC"/>
			<macro name="QNX4_SUPER_MAGIC"/>
			<macro name="REISERFS_SUPER_MAGIC"/>
			<macro name="ROMFS_MAGIC"/>
			<macro name="SMB_SUPER_MAGIC"/>
			<macro name="SYSV2_SUPER_MAGIC"/>
			<macro name="SYSV4_SUPER_MAGIC"/>
			<macro name="TMPFS_MAGIC"/>
			<macro name="UDF_SUPER_MAGIC"/>
			<macro name="UFS_MAGIC"/>
			<macro name="USBDEVICE_SUPER_MAGIC"/>
			<macro name="VXFS_SUPER_MAGIC"/>
			<macro name="XENIX_SUPER_MAGIC"/>
			<macro name="XFS_SUPER_MAGIC"/>
			<macro name="_XIAFS_SUPER_MAGIC"/>
		</set>
		<set type="logopt_t" genset="300" format="16#%08X#">
			<includes>
				<include file="syslog.h"/>
			</includes>
			<macro name="LOG_CONS"/>
			<macro name="LOG_NDELAY"/>
			<macro name="LOG_PERROR"/>
			<macro name="LOG_PID"/>
		</set>
		<set type="logfac_t" genset="305" format="16#%08X#">
			<includes>
				<include file="syslog.h"/>
			</includes>
			<macro name="LOG_EMERG"/>
			<macro name="LOG_ALERT"/>
			<macro name="LOG_CRIT"/>
			<macro name="LOG_ERR"/>
			<macro name="LOG_WARNING"/>
			<macro name="LOG_NOTICE"/>
			<macro name="LOG_INFO"/>
			<macro name="LOG_DEBUG"/>
			<!-- -->
			<macro name="LOG_AUTH"/>
			<macro name="LOG_AUTHPRIV"/>
			<macro name="LOG_CRON"/>
			<macro name="LOG_DAEMON"/>
			<macro name="LOG_FTP"/>
			<macro name="LOG_KERN"/>
			<macro name="LOG_LPR"/>
			<macro name="LOG_MAIL"/>
			<macro name="LOG_NEWS"/>
			<macro name="LOG_SECURITY"/>
			<macro name="LOG_SYSLOG"/>
			<macro name="LOG_USER"/>
			<macro name="LOG_UUCP"/>
			<macro name="LOG_LOCAL0"/>
			<macro name="LOG_LOCAL1"/>
			<macro name="LOG_LOCAL2"/>
			<macro name="LOG_LOCAL3"/>
			<macro name="LOG_LOCAL4"/>
			<macro name="LOG_LOCAL5"/>
			<macro name="LOG_LOCAL6"/>
			<macro name="LOG_LOCAL7"/>
		</set>
		<set type="itim_t" genset="307" format="16#%08X#">
			<includes>
				<include file="sys/time.h"/>
			</includes>
			<macro name="ITIMER_REAL"/>
			<macro name="ITIMER_VIRTUAL"/>
			<macro name="ITIMER_PROF"/>
		</set>
		<set type="ipccmd_t" genset="310" format="16#%08X#">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/msg.h"/>
				<include file="sys/sem.h"/>
			</includes>
			<macro name="IPC_STAT"/>
			<macro name="IPC_SET"/>
			<macro name="IPC_RMID"/>
			<macro name="IPC_INFO"/>
			<macro name="MSG_STAT" os="Linux *"/>
			<macro name="GETALL"  ada_name="IPC_GETALL"/>
			<macro name="GETNCNT" ada_name="IPC_GETNCNT"/>
			<macro name="GETPID"  ada_name="IPC_GETPID"/>
			<macro name="GETVAL"  ada_name="IPC_GETVAL"/>
			<macro name="GETZCNT" ada_name="IPC_GETZCNT"/>
			<macro name="SETALL"  ada_name="IPC_SETALL"/>
			<macro name="SETVAL"  ada_name="IPC_SETVAL"/>
		</set>
		<set type="" genset="315" format="16#%08X#">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/msg.h"/>
			</includes>
			<macro name="IPC_PRIVATE"/>
			<macro name="IPC_PRIVATE"/>
			<macro name="IPC_CREAT"/>
			<macro name="IPC_EXCL"/>
			<macro name="IPC_NOWAIT"/>
			<macro name="MSG_NOERROR"/>
			<macro name="MSG_EXCEPT"/>
		</set>
	</macro_constants>
	<structs>
		<struct name="timespec" alt="_timespec" ada="s_timespec" genset="400">
			<includes>
				<include file="fcntl.h"/>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
			</includes>
			<members>
				<member name="tv_sec" pref="time_t"/>
			</members>
		</struct>
		<struct name="timeval" ada="s_timeval" genset="410">
			<includes>
				<include file="sys/time.h"/>
			</includes>
			<members>
				<member name="tv_sec" pref="time_t"/>
			</members>
		</struct>
		<struct name="rusage" ada="s_rusage" genset="420">
			<includes>
				<include file="sys/resource.h"/>
			</includes>
		</struct>
		<struct name="flock" ada="s_flock" genset="440">
			<includes>
				<include file="fcntl.h"/>
			</includes>
			<members>
				<member name="l_type"   pref="short_t"/>
				<member name="l_whence" pref="short_t"/>
				<member name="l_pid"    pref="pid_t"/>
				<member name="l_start"  pref="off_t"/>
				<member name="l_len"    pref="off_t"/>
			</members>
		</struct>
		<struct name="fstore" ada="s_fstore" genset="450" os="Darwin *">
			<includes>
				<include file="fcntl.h"/>
			</includes>
		</struct>
		<struct name="log2phys" ada="s_log2phys" os="Darwin *" genset="460">
			<includes>
				<include file="fcntl.h"/>
			</includes>
			<members>
				<member name="l2p_contigbytes" pref="off_t"/>
				<member name="l2p_devoffset" pref="off_t"/>
			</members>
		</struct>
		<struct name="stat" ada="s_stat" genset="470">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
				<include file="sys/param.h"/>
				<include file="sys/mount.h"/>
			</includes>
			<members>
				<member name="st_dev" pref="dev_t"/>
				<member name="st_mode" pref="mode_t"/>
				<member name="st_nlink" pref="nlink_t"/>
				<member name="st_ino" pref="ino_t"/>
				<member name="st_uid" pref="uid_t"/>
				<member name="st_gid" pref="gid_t"/>
				<member name="st_rdev" pref="dev_t"/>
				<member name="st_size" pref="off_t"/>
				<member name="st_blocks" pref="blkcnt_t"/>
				<member name="st_blksize" pref="blksize_t"/>
			</members>
		</struct>
		<struct name="tm" ada="s_tm" genset="480">
			<includes>
				<include file="time.h"/>
			</includes>
			<members>
				<member name="tm_gmtoff" pref="long_t"/>
				<member name="tm_hour" pref="int_t"/>
				<member name="tm_isdst" pref="int_t"/>
				<member name="tm_mday" pref="int_t"/>
				<member name="tm_min" pref="int_t"/>
				<member name="tm_mon" pref="int_t"/>
				<member name="tm_sec" pref="int_t"/>
				<member name="tm_wday" pref="int_t"/>
				<member name="tm_yday" pref="int_t"/>
				<member name="tm_year" pref="int_t"/>
			</members>
		</struct>
		<struct name="utimbuf" ada="s_utimbuf" genset="500">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/uio.h"/>
				<include file="unistd.h"/>
				<include file="utime.h"/>
			</includes>
			<members>
				<member name="actime" pref="time_t"/>
				<member name="modtime" pref="time_t"/>
			</members>
		</struct>
		<struct name="tms" ada="s_tms" genset="510">
			<includes>
				<include file="sys/times.h"/>
			</includes>
			<members>
				<member name="tms_utime" pref="clock_t"/>
				<member name="tms_stime" pref="clock_t"/>
				<member name="tms_cutime" pref="clock_t"/>
				<member name="tms_cstime" pref="clock_t"/>
			</members>
		</struct>
		<struct name="radvisory" ada="s_radvisory" os="Darwin *" genset="520">
			<includes>
				<include file="sys/param.h"/>
				<include file="sys/stat.h"/>
				<include file="fcntl.h"/>
			</includes>
		</struct>
		<struct name="utsname" ada="s_utsname" genset="530">
			<includes>
				<include file="sys/utsname.h"/>
			</includes>
		</struct>
		<struct name="iovec" ada="s_iovec" genset="540">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/uio.h"/>
				<include file="unistd.h"/>
			</includes>
			<members>
				<member name="iov_len" pref="size_t"/>
			</members>
		</struct>
		<struct name="rlimit" ada="s_rlimit" genset="550">
			<includes>
				<include file="sys/resource.h"/>
			</includes>
			<members>
				<member name="rlim_cur" pref="rlim_t"/>
				<member name="rlim_max" pref="rlim_t"/>
			</members>
		</struct>
		<struct name="sigset_t" ada="sigset_t" genset="560" os="Linux *">
			<includes>
				<include file="signal.h"/>
			</includes>
		</struct>
		<struct name="sigset_t" ada="sigset_t" genset="560" os="FreeBSD *">
			<includes>
				<include file="signal.h"/>
			</includes>
		</struct>
		<struct name="dirent" ada="s_dirent" genset="580">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
		</struct>
		<struct name="__fsid_t" ada="fsid_t" genset="581" os="Linux *">
			<includes>
				<include file="sys/vfs.h"/>
			</includes>
		</struct>
		<struct name="fsid_t" ada="fsid_t" genset="581" os="Darwin *">
                        <includes>
                                <include file="sys/param.h"/>
				<include file="sys/mount.h"/>
			</includes>
		</struct>
		<struct name="statfs" ada="s_statfs" genset="583" os="Linux *">
			<includes>
				<include file="sys/vfs.h"/>
			</includes>
			<members>
				<member name="f_fsid" pref="fsid_t" struct="2"/>
			</members>
		</struct>
		<struct name="fsid_t" ada="fsid_t" genset="581" os="FreeBSD *">
                        <includes>
                                <include file="sys/param.h"/>
				<include file="sys/mount.h"/>
			</includes>
		</struct>
		<struct name="statfs" ada="s_statfs" genset="583" os="FreeBSD *">
			<includes>
				<include file="sys/param.h"/>
				<include file="sys/mount.h"/>
			</includes>
			<members>
				<member name="f_fsid" pref="fsid_t" struct="2"/>
			</members>
		</struct>
		<struct name="statfs" ada="s_statfs" genset="583" os="Darwin *">
			<includes>
				<include file="sys/param.h"/>
				<include file="sys/mount.h"/>
			</includes>
			<members>
				<member name="f_fsid" pref="fsid_t" struct="2"/>
			</members>
		</struct>
		<struct name="itimerval" ada="s_itimerval" genset="585">
			<includes>
				<include file="sys/time.h"/>
			</includes>
		</struct>
		<struct name="sysinfo" ada="s_sysinfo" genset="587" os="Linux *">
			<includes>
				<include file="sys/sysinfo.h"/>
			</includes>
		</struct>
		<struct name="ipc_perm" ada="s_ipc_perm" genset="590">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/msg.h"/>
			</includes>
		</struct>
		<struct name="msqid_ds" ada="s_msqid_ds" genset="593" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/msg.h"/>
			</includes>
			<members>
				<member name="msg_stime" pref="time_t"/>
				<member name="msg_rtime" pref="time_t"/>
				<member name="msg_ctime" pref="time_t"/>
			</members>
		</struct>
		<struct name="msginfo" ada="s_msginfo" genset="595" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/msg.h"/>
			</includes>
		</struct>
		<struct name="semid_ds" ada="s_semid_ds" genset="600" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/sem.h"/>
			</includes>
			<members>
				<member name="sem_otime" pref="time_t"/>
				<member name="sem_ctime" pref="time_t"/>
			</members>
		</struct>
		<struct name="seminfo" ada="s_seminfo" genset="603" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/sem.h"/>
			</includes>
		</struct>
	</structs>
	<section2 genset="700">
		<func name="open" return="int_t" ada_type="procedure" rname="R" ada_name="Open" inline="1" test="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="T1'Address"/>
			<c_arg name="oflags" type="uint_t" from="OFlags"/>
			<ada_arg name="Path" io="in" type="String" temp="T1" tempval="C_String(Path)"/>
			<ada_arg name="OFlags" io="in" type="uint_t"/>
                        <ada_arg name="Fd" io="out" type="fd_t" from="fd_t(R)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="open" return="int_t" ada_type="procedure" rname="R" ada_name="Open" 
                 test="1" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="T1'Address"/>
			<c_arg name="oflags" type="uint_t" from="OFlags"/>
			<c_arg name="mode" type="uint_t" from="uint_t(Mode)"/>
			<ada_arg name="Path" io="in" type="String" temp="T1" tempval="C_String(Path)"/>
			<ada_arg name="OFlags" io="in" type="uint_t"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
                        <ada_arg name="Fd" io="out" type="fd_t" from="fd_t(R)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="creat" return="int_t" ada_type="procedure" rname="R" ada_name="Create" 
		 test="2" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="T1'Address"/>
			<c_arg name="mode" type="mode_t" from="Mode"/>
			<ada_arg name="Path" io="in" type="String" temp="T1" tempval="C_String(Path)"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
                        <ada_arg name="Fd" io="out" type="fd_t" from="fd_t(R)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="close" return="int_t" ada_type="procedure" rname="Status" ada_name="Close" 
		 test="1" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="dup" return="int_t" ada_type="procedure" rname="R" ada_name="Dup" 
		 test="9" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Fd2" io="out" type="fd_t" from="fd_t(R)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="dup2" return="int_t" ada_type="procedure" rname="Status" ada_name="Dup2" 
		 test="9" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<c_arg name="fd2" type="fd_t" from="Fd2"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Fd2" io="in" type="fd_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="write" return="ssize_t" ada_type="procedure" rname="Status" ada_name="Write" 
		 test="1" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<c_arg name="buf" type="System.Address" from="Buffer(Buffer'First)'Address"/>
			<c_arg name="count" type="size_t" from="Buffer'Length"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Buffer" io="in" type="uchar_array"/>
			<ada_arg name="Count" io="out" type="Natural" from="To_Count(Status)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="pwrite" return="ssize_t" ada_type="procedure" rname="Status" ada_name="PWrite" 
		 test="3" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<c_arg name="buf" type="System.Address" from="Buffer(Buffer'First)'Address"/>
			<c_arg name="count" type="size_t" from="Buffer'Length"/>
			<c_arg name="offset" type="off_t" from="Offset"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Buffer" io="in" type="uchar_array"/>
			<ada_arg name="Offset" io="in" type="off_t"/>
			<ada_arg name="Count" io="out" type="Natural" from="To_Count(Status)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="read" return="ssize_t" ada_type="procedure" rname="Status" ada_name="Read" 
		 test="1" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<c_arg name="buf" type="System.Address" from="Buffer(Buffer'First)'Address"/>
			<c_arg name="count" type="size_t" from="Buffer'Length"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Buffer" io="out" type="uchar_array" from="implied"/>
			<ada_arg name="Last" io="out" type="Natural" from="Natural(Buffer'First)+To_Count(Status)-1"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="readlink" return="ssize_t" ada_type="procedure" rname="Status" ada_name="Readlink" 
		 test="10" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="P'Address"/>
			<c_arg name="buf" type="System.Address" from="Buffer'Address"/>
			<c_arg name="bufsiz" type="size_t" from="Buffer'Length"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Buffer" io="out" type="String" from="implied"/>
			<ada_arg name="Last" io="out" type="Natural" from="Natural(Buffer'First)+To_Count(Status)-1"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="pread" return="ssize_t" ada_type="procedure" rname="Status" ada_name="PRead" 
		 test="3" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<c_arg name="buf" type="System.Address" from="Buffer(Buffer'First)'Address"/>
			<c_arg name="count" type="size_t" from="Buffer'Length"/>
			<c_arg name="offset" type="off_t" from="Offset"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Buffer" io="out" type="uchar_array" from="implied"/>
			<ada_arg name="Offset" io="in" type="off_t"/>
			<ada_arg name="Last" io="out" type="Natural" from="Natural(Buffer'First)+To_Count(Status)-1"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="exit" return="" ada_type="procedure" rname="" ada_name="Sys_Exit" 
		 test="4" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="status" type="int_t" from="Status"/>
			<ada_arg name="Status" io="in" type="int_t"/>
		</func>
		<func name="_exit" altname="UX_exit" return="" ada_type="procedure" rname="" ada_name="Sys_Exit2" 
		 test="5" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="status" type="int_t" from="Status"/>
			<ada_arg name="Status" io="in" type="int_t"/>
		</func>
		<func name="fork" return="pid_t" ada_type="procedure" rname="P" ada_name="Fork" 
		 test="6" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<ada_arg name="PID" io="out" type="pid_t" from="P"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(PID)"/>
		</func>
		<func name="wait" return="pid_t" ada_type="procedure" rname="P" ada_name="Wait" 
		 test="6" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/wait.h"/>
			</includes>
			<c_arg name="status" type="System.Address" from="S'Address"/>
			<ada_arg name="status" io="out" type="int_t" from="S"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(P)"/>
			<temp name="S" type="int_t" init="0"/>
		</func>
		<func name="WIFEXITED" rname="R" return="int_t" ada_type="function" ada_name="WIFEXITED" 
		 ada_return="Boolean" ada_return_from="R /= 0" prefix="adafpx_macro_"
		 macro="int adafpx_macro_WIFEXITED(int s) { return WIFEXITED(s); }" 
		 test="6" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/wait.h"/>
			</includes>
			<c_arg   name="s"    type="int_t"  from="Status"/>
			<ada_arg name="Status" io="in" type="int_t"/>
		</func>
		<func name="WIFSIGNALED" rname="R" return="int_t" ada_type="function" ada_name="WIFSIGNALED" 
		 ada_return="Boolean" ada_return_from="R /= 0" prefix="adafpx_macro_"
		 macro="int adafpx_macro_WIFSIGNALED(int s) { return WIFSIGNALED(s); }" 
		 test="7" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/wait.h"/>
			</includes>
			<c_arg   name="s"    type="int_t"  from="Status"/>
			<ada_arg name="Status" io="in" type="int_t"/>
		</func>
		<func name="WIFSTOPPED" rname="R" return="int_t" ada_type="function" ada_name="WIFSTOPPED" 
		 ada_return="Boolean" ada_return_from="R /= 0" prefix="adafpx_macro_"
		 macro="int adafpx_macro_WIFSTOPPED(int s) { return WIFSTOPPED(s); }" 
		 inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/wait.h"/>
			</includes>
			<c_arg   name="s"    type="int_t"  from="Status"/>
			<ada_arg name="Status" io="in" type="int_t"/>
		</func>
		<func name="WEXITSTATUS" rname="R" return="int_t" ada_type="function" ada_name="WEXITSTATUS" 
		 ada_return="int_t" ada_return_from="R" prefix="adafpx_macro_"
		 macro="int adafpx_macro_WEXITSTATUS(int s) { return WEXITSTATUS(s); }" 
		 test="6" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/wait.h"/>
			</includes>
			<c_arg   name="s"    type="int_t"  from="Status"/>
			<ada_arg name="Status" io="in" type="int_t"/>
		</func>
		<func name="WTERMSIG" rname="R" return="sig_t" ada_type="function" ada_name="WTERMSIG" 
		 ada_return="sig_t" ada_return_from="R" prefix="adafpx_macro_"
		 macro="int adafpx_macro_WTERMSIG(int s) { return WTERMSIG(s); }" 
		 test="7" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/wait.h"/>
			</includes>
			<c_arg   name="s"    type="int_t"  from="status"/>
			<ada_arg name="status" io="in" type="int_t"/>
		</func>
		<func name="WCOREDUMP" rname="R" return="int_t" ada_type="function" ada_name="WCOREDUMP" 
		 ada_return="Boolean" ada_return_from="R /= 0" prefix="adafpx_macro_"
		 macro="int adafpx_macro_WCOREDUMP(int s) { return WCOREDUMP(s); }" 
		 inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/wait.h"/>
			</includes>
			<c_arg   name="s"    type="int_t"  from="Status"/>
			<ada_arg name="Status" io="in" type="int_t"/>
		</func>
		<func name="WSTOPSIG" rname="R" return="sig_t" ada_type="function" ada_name="WSTOPSIG" 
		 ada_return="sig_t" ada_return_from="R" prefix="adafpx_macro_"
		 macro="int adafpx_macro_WSTOPSIG(int s) { return WSTOPSIG(s); }" 
		 test="6" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/wait.h"/>
			</includes>
			<c_arg   name="s"    type="int_t"  from="status"/>
			<ada_arg name="status" io="in" type="int_t"/>
		</func>
		<func name="waitpid" return="pid_t" ada_type="procedure" rname="P" ada_name="Wait_Pid" 
		 test="8" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/wait.h"/>
			</includes>
			<c_arg name="pid" type="pid_t" from="PID"/>
			<c_arg name="status" type="System.Address" from="S'Address"/>
			<c_arg name="options" type="int_t" from="Options"/>
			<ada_arg name="PID" io="in" type="pid_t"/>
			<ada_arg name="Options" io="in" type="int_t"/>	
			<ada_arg name="status" io="out" type="int_t" from="S"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(P)"/>
			<temp name="S" type="int_t" init="0"/>
		</func>
		<func name="link" return="int_t" ada_type="procedure" rname="Status" ada_name="Link" 
		 test="9" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="path1" type="System.Address" from="C_Path1'Address"/>
			<c_arg name="path2" type="System.Address" from="C_Path2'Address"/>
			<ada_arg name="Path1" io="in" type="String"/>
			<ada_arg name="Path2" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="C_Path1" type="String" init="C_String(Path1)"/>
			<temp name="C_Path2" type="String" init="C_String(Path2)"/>
		</func>
		<func name="unlink" return="int_t" ada_type="procedure" rname="Status" ada_name="Unlink" 
		 test="1" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="Temp'Address"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="Temp" type="String" init="C_String(Path)"/>
		</func>
		<func name="getcwd" return="System.Address" ada_type="procedure" rname="R" ada_name="Getcwd" 
		 test="11" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="buf" type="System.Address" from="Buffer'Address"/>
			<c_arg name="size" type="size_t" from="Buffer'Length"/>
			<ada_arg name="Buffer" io="out" type="String" from="implied"/>
			<ada_arg name="Last"   io="out" type="Natural" from="Buffer'First+Strlen(R)-1"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="getcwd" return="System.Address" ada_type="function" rname="R" ada_name="Getwd" 
                 ada_return="String" ada_return_from="Ada_String(R)"
		 test="11" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="buf" type="System.Address" from="T'Address"/>
			<c_arg name="size" type="size_t" from="T'Length"/>
			<temp name="T" type="String(1..MAXPATHLEN+1)"/>
		</func>
		<func name="chdir" return="int_t" ada_type="procedure" rname="Status" ada_name="Chdir" 
		 test="11" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="Temp'Address"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="Temp" type="String" init="C_String(Path)"/>
		</func>
		<func name="fchdir" return="int_t" ada_type="procedure" rname="Status" ada_name="FChdir" 
		 test="11" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="fildes" type="fd_t" from="Fildes"/>
			<ada_arg name="Fildes" io="in" type="fd_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="time" return="" ada_type="procedure" rname="" ada_name="Time" 
		 test="16" inline="1">
			<includes>
				<include file="time.h"/>
			</includes>
			<c_arg name="t" type="System.Address" from="T'Address"/>
			<ada_arg name="Time" io="out" type="time_t" from="T"/>
			<temp name="T" type="time_t" init="0"/>
		</func>
		<func name="mknod" return="int_t" ada_type="procedure" rname="Status" ada_name="Mknod" 
		 test="20" inline="1">
			<includes>
				<include file="sys/unistd.h"/>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
				<include file="sys/fcntl.h"/>
			</includes>
			<c_arg name="pathname" type="System.Address" from="Temp'Address"/>
			<c_arg name="mode" type="mode_t" from="Mode"/>
			<c_arg name="dev" type="dev_t" from="Dev"/>
			<ada_arg name="Pathname" io="in" type="String"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
			<ada_arg name="Dev" io="in" type="dev_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="Temp" type="String" init="C_String(Pathname)"/>
		</func>
		<func name="mkfifo" return="int_t" ada_type="procedure" rname="Status" ada_name="Mkfifo" 
		 test="21" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
			</includes>
			<c_arg name="pathname" type="System.Address" from="Temp'Address"/>
			<c_arg name="mode" type="mode_t" from="Mode"/>
			<ada_arg name="Pathname" io="in" type="String"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="Temp" type="String" init="C_String(Pathname)"/>
		</func>
		<func name="chmod" return="int_t" ada_type="procedure" rname="Status" ada_name="Chmod" 
		 test="17" inline="1">
			<includes>
				<include file="sys/stat.h"/>
			</includes>
			<c_arg name="pathname" type="System.Address" from="Temp'Address"/>
			<c_arg name="mode" type="mode_t" from="Mode"/>
			<ada_arg name="Pathname" io="in" type="String"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="Temp" type="String" init="C_String(Pathname)"/>
		</func>
		<func name="fchmod" return="int_t" ada_type="procedure" rname="Status" ada_name="FChmod" 
		 test="17" inline="1">
			<includes>
				<include file="sys/stat.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<c_arg name="mode" type="mode_t" from="Mode"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="chown" return="int_t" ada_type="procedure" rname="Status" ada_name="Chown" 
		 test="18" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="pathname" type="System.Address" from="Temp'Address"/>
			<c_arg name="owner" type="uid_t" from="Owner"/>
			<c_arg name="group" type="gid_t" from="Group"/>
			<ada_arg name="Pathname" io="in" type="String"/>
			<ada_arg name="Owner" io="in" type="uid_t"/>
			<ada_arg name="Group" io="in" type="gid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="Temp" type="String" init="C_String(Pathname)"/>
		</func>
		<func name="fchown" return="int_t" ada_type="procedure" rname="Status" ada_name="FChown" 
		 test="18" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<c_arg name="owner" type="uid_t" from="Owner"/>
			<c_arg name="group" type="gid_t" from="Group"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Owner" io="in" type="uid_t"/>
			<ada_arg name="Group" io="in" type="gid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="lchown" return="int_t" ada_type="procedure" rname="Status" ada_name="LChown" 
		 test="19" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="pathname" type="System.Address" from="Temp'Address"/>
			<c_arg name="owner" type="uid_t" from="Owner"/>
			<c_arg name="group" type="gid_t" from="Group"/>
			<ada_arg name="Pathname" io="in" type="String"/>
			<ada_arg name="Owner" io="in" type="uid_t"/>
			<ada_arg name="Group" io="in" type="gid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="Temp" type="String" init="C_String(Pathname)"/>
		</func>
		<func name="lseek" return="off_t" ada_type="procedure" rname="R" ada_name="LSeek" 
		 test="1" inline="1">
			<includes>
				<include file="unistd.h"/>
				<include file="sys/types.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<c_arg name="offset" type="off_t" from="Offset"/>
			<c_arg name="whence" type="whence_t" from="Whence"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Offset" io="in out" type="off_t" from="R"/>
			<ada_arg name="Whence" io="in" type="whence_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="getpid" return="pid_t" ada_type="function" rname="P" ada_name="Getpid" 
		 ada_return="pid_t" ada_return_from="P"
		 test="6" inline="1">
			<includes>
				<include file="unistd.h"/>
				<include file="sys/types.h"/>
			</includes>
		</func>
		<func name="getppid" return="pid_t" ada_type="function" rname="P" ada_name="Getppid" 
		 ada_return="pid_t" ada_return_from="P"
		 test="6" inline="1">
			<includes>
				<include file="unistd.h"/>
				<include file="sys/types.h"/>
			</includes>
		</func>
		<func name="getpgid" return="pid_t" ada_type="procedure" rname="P" ada_name="Getpgid" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="pid" type="pid_t" from="PID"/>
			<ada_arg name="PID" io="in" type="pid_t"/>
			<ada_arg name="PPID" io="out" type="pid_t" from="P"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(P)"/>
		</func>
		<func name="getpgrp" return="pid_t" ada_type="function" rname="P" ada_name="Getpgrp" 
		 ada_return="pid_t" ada_return_from="P"
		 inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
		</func>
		<func name="setpgid" return="pid_t" ada_type="procedure" rname="Status" ada_name="Setpgid" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="pid" type="pid_t" from="PID"/>
			<c_arg name="pgid" type="pid_t" from="PGID"/>
			<ada_arg name="PID" io="in" type="pid_t"/>
			<ada_arg name="PGID" io="in" type="pid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="setpgrp" return="pid_t" ada_type="procedure" rname="Status" ada_name="Setpgrp" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="pid" type="pid_t" from="PID"/>
			<c_arg name="pgid" type="pid_t" from="PGRP"/>
			<ada_arg name="PID" io="in" type="pid_t"/>
			<ada_arg name="PGRP" io="in" type="pid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="mount" return="int_t" ada_type="procedure" rname="Status" ada_name="Mount" inline="1">
			<includes>
				<include file="sys/mount.h"/>
			</includes>
			<c_arg name="source" type="System.Address" from="C_Source'Address"/>
			<c_arg name="target" type="System.Address" from="C_Target'Address"/>
			<c_arg name="filesystemtype" type="System.Address" from="C_FST'Address"/>
			<c_arg name="mountflags" type="uint_t" from="Mount_Flags"/>
			<c_arg name="data" type="System.Address" from="Data"/>
			<ada_arg name="Source" io="in" type="String"/>
			<ada_arg name="Target" io="in" type="String"/>
			<ada_arg name="Filesystem_Type" io="in" type="String"/>
			<ada_arg name="Mount_Flags" io="in" type="uint_t"/>
			<ada_arg name="Data" io="in" type="System.Address"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="C_Source" type="String" init="C_String(Source)"/>
			<temp name="C_Target" type="String" init="C_String(Target)"/>
			<temp name="C_FST" type="String" init="C_String(Filesystem_Type)"/>
		</func>
		<func name="umount" return="int_t" ada_type="procedure" rname="Status" ada_name="UMount" inline="1" os="Linux*">
			<includes>
				<include file="sys/mount.h"/>
			</includes>
			<c_arg name="target" type="System.Address" from="C_Target'Address"/>
			<ada_arg name="Target" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="C_Target" type="String" init="C_String(Target)"/>
		</func>
		<func name="umount2" return="int_t" ada_type="procedure" rname="Status" ada_name="UMount2" inline="1" os="Linux*">
			<includes>
				<include file="sys/mount.h"/>
			</includes>
			<c_arg name="target" type="System.Address" from="C_Target'Address"/>
			<c_arg name="flags" type="int_t" from="Flags"/>
			<ada_arg name="Target" io="in" type="String"/>
			<ada_arg name="Flags" io="in" type="int_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="C_Target" type="String" init="C_String(Target)"/>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl" 
		 test="22" inline="1">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<c_arg name="cmd" type="fcntl_t" from="Cmd"/>
			<c_arg name="newfd" type="long_t" from="long_t(New_Fd)"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="New_Fd" io="in" type="fd_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd">
				<case name="F_DUPFD"/>
				<case name="F_DUPFD_CLOEXEC"/>
			</cases>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl" 
		 test="22" inline="1">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="Flags" io="out" type="uint_t" from="uint_t(Status)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd" on_error="Flags := 0">
				<case name="F_GETFD"/>
				<case name="F_GETFL"/>
			</cases>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl_Set" 
		 test="22" inline="1">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
                        <c_arg name="Flags" type="ulong_t" from="Flags"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="Flags" io="in" type="ulong_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd">
				<case name="F_SETFD"/>
				<case name="F_SETFL"/>
			</cases>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl" 
                 test="23" inline="1">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
			<c_arg name="Flock" type="System.Address" from="Flock'Address"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="Flock" io="in out" type="s_flock" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd">
				<case name="F_GETLK"/>
				<case name="F_SETLK"/>
				<case name="F_SETLKW"/>
			</cases>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl" inline="1">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="PID" io="out" type="pid_t" from="Pos_PID(Status)"/>
			<ada_arg name="GPID" io="out" type="pid_t" from="Neg_PID(Status)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd" on_error="PID := 0; GPID := 0">
				<case name="F_GETOWN"/>
			</cases>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl" inline="1">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
                        <c_arg name="PID" type="long_t" from="long_t(PID)"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="PID" io="in" type="pid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd">
				<case name="F_SETOWN"/>
			</cases>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl" inline="1" os="Linux *">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="Sig" io="out" type="sig_t" from="sig_t(Status)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd" on_error="Sig := 0">
				<case name="F_GETSIG"/>
			</cases>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl" inline="1" os="Linux *">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
                        <c_arg name="Sig" type="long_t" from="long_t(Sig)"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="Sig" io="in" type="sig_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd" on_error="Sig := 0">
				<case name="F_SETSIG"/>
			</cases>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl" inline="1" os="Linux *">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
                        <c_arg name="Opt" type="uint_t" from="Opt"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="Opt" io="in" type="uint_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd">
				<case name="F_SETLEASE"/>
			</cases>
			<cases name="Opt">
				<case name="F_RDLCK"/>
				<case name="F_WRLCK"/>
				<case name="F_UNLCK"/>
			</cases>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl" 
		 test="24" inline="1" os="Darwin *">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
                        <c_arg name="Path" type="System.Address" from="Path'Address"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="Path" io="out" type="String" from="implied"/>
			<ada_arg name="Last" io="out" type="Natural" from="C_Last(Path)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd" on_error="Last := Path'First-1">
				<case name="F_GETPATH"/>
			</cases>
			<prechecks on_error="Last := Path'First-1; Error := EINVAL">
				<precheck cond="Path'Length >= MAXPATHLEN"/>
			</prechecks>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl" inline="1" os="Darwin *">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
                        <c_arg name="FSstore" type="System.Address" from="FStore'Address"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="FStore" io="in out" type="s_fstore" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd">
				<case name="F_PREALLOCATE"/>
			</cases>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl" inline="1" os="Darwin *">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
                        <c_arg name="Arg" type="long_t" from="Arg"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="Arg" io="in" type="long_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd">
				<case name="F_SETSIZE"/>
				<case name="F_RDAHEAD"/>                    
				<case name="F_NOCACHE"/>
				<case name="F_SETNOSIGPIPE"/>                            
			</cases>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl2" inline="1" os="Darwin *">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="Arg" io="out" type="long_t" from="long_t(Status)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd" on_error="Arg := 0">
				<case name="F_GETNOSIGPIPE"/>
			</cases>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl" inline="1" os="Darwin *">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
                        <c_arg name="Radvisory" type="System.Address" from="Radvisory'Address"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="Radvisory" io="in" type="s_radvisory"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd">
				<case name="F_RDADVISE"/>
			</cases>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl" inline="1" os="Darwin *">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
                        <c_arg name="Arg" type="System.Address" from="Arg'Address"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="Arg" io="in out" type="s_log2phys" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd">
				<case name="F_LOG2PHYS"/>
				<case name="F_LOG2PHYS_EXT"/>
			</cases>
		</func>
		<func name="fcntl" return="int_t" ada_type="procedure" rname="Status" ada_name="Fcntl" inline="1" os="Darwin *">
			<includes>
				<include file="unistd.h"/>
				<include file="fcntl.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="Cmd" type="fcntl_t" from="Cmd"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Cmd" io="in" type="fcntl_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<cases name="Cmd">
				<case name="F_FULLFSYNC"/>
			</cases>
		</func>
		<func name="readv" return="ssize_t" ada_type="procedure" rname="Status" ada_name="Readv" 
		 test="25" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/uio.h"/>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="IOV" type="System.Address" from="IOV(IOV'First)'Address"/>
			<c_arg name="Count" type="int_t" from="IOV'Length"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="IOV" io="in" type="s_iovec_array"/>
			<ada_arg name="Count" io="out" type="Natural" from="To_Count(Status)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="writev" return="ssize_t" ada_type="procedure" rname="Status" ada_name="Writev" 
		 test="25" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/uio.h"/>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="Fd" type="fd_t" from="Fd"/>
			<c_arg name="IOV" type="System.Address" from="IOV(IOV'First)'Address"/>
			<c_arg name="Count" type="int_t" from="IOV'Length"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="IOV" io="in" type="s_iovec_array"/>
			<ada_arg name="Count" io="out" type="Natural" from="To_Count(Status)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="wait3" return="pid_t" ada_type="procedure" rname="R" ada_name="Wait3" 
                 test="26" inline="1">
			<includes>
				<include file="sys/wait.h"/>
			</includes>
			<c_arg name="stat_loc" type="System.Address" from="S'Address"/>
			<c_arg name="options" type="uint_t" from="Options"/>
			<c_arg name="rusage" type="System.Address" from="Rusage'Address"/>
			<ada_arg name="PID" io="out" type="pid_t" from="R"/>
			<ada_arg name="Options" io="in" type="uint_t"/>
			<ada_arg name="Status" io="out" type="int_t" from="S"/>
			<ada_arg name="Rusage" io="out" type="s_rusage" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="S" type="int_t" init="0"/>
		</func>
		<func name="wait4" return="pid_t" ada_type="procedure" rname="R" ada_name="Wait4" inline="1" os="Darwin *">
			<includes>
				<include file="sys/wait.h"/>
			</includes>
			<c_arg name="pid" type="pid_t" from="PID"/>
			<c_arg name="stat_loc" type="System.Address" from="S'Address"/>
			<c_arg name="options" type="uint_t" from="Options"/>
			<c_arg name="rusage" type="System.Address" from="Rusage'Address"/>
			<ada_arg name="PID" io="in out" type="pid_t" from="R"/>
			<ada_arg name="Options" io="in" type="uint_t"/>
			<ada_arg name="Status" io="out" type="int_t" from="S"/>
			<ada_arg name="Rusage" io="out" type="s_rusage" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="S" type="int_t" init="0"/>
		</func>
		<func name="execve" return="int_t" ada_type="procedure" rname="R" ada_name="Execve" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="P'Address"/>
			<c_arg name="argv" type="System.Address" from="Argv'Address"/>
			<c_arg name="envp" type="System.Address" from="Env'Address"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Argv" io="in" type="argv_array"/>
			<ada_arg name="Env" io="in" type="argv_array"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="stat" return="int_t" ada_type="procedure" rname="R" ada_name="Stat" 
		 test="9" inline="1" os="Linux *|FreeBSD *">
			<includes>
				<include file="unistd.h"/>
				<include file="sys/stat.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="P'Address"/>
			<c_arg name="buf" type="System.Address" from="Stat'Address"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Stat" io="out" type="s_stat" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="stat$INODE64" altname="UX_stat" return="int_t" ada_type="procedure" rname="R" ada_name="Stat" 
		 test="9" inline="1" os="Darwin *">
			<includes>
				<include file="unistd.h"/>
				<include file="sys/stat.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="P'Address"/>
			<c_arg name="buf" type="System.Address" from="Stat'Address"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Stat" io="out" type="s_stat" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="fstat" return="int_t" ada_type="procedure" rname="R" ada_name="FStat" 
		 test="9" inline="1" os="Linux *|FreeBSD *">
			<includes>
				<include file="unistd.h"/>
				<include file="sys/stat.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<c_arg name="buf" type="System.Address" from="Stat'Address"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Stat" io="out" type="s_stat" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="fstat$INODE64" altname="fstat" return="int_t" ada_type="procedure" rname="R" ada_name="FStat" 
		 test="9" inline="1" os="Darwin *">
			<includes>
				<include file="unistd.h"/>
				<include file="sys/stat.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<c_arg name="buf" type="System.Address" from="Stat'Address"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Stat" io="out" type="s_stat" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="lstat" return="int_t" ada_type="procedure" rname="R" ada_name="LStat" 
		 test="19" inline="1" os="Linux *|FreeBSD *">
			<includes>
				<include file="unistd.h"/>
				<include file="sys/stat.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="P'Address"/>
			<c_arg name="buf" type="System.Address" from="Stat'Address"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Stat" io="out" type="s_stat" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="lstat$INODE64" altname="lstat" return="int_t" ada_type="procedure" rname="R" ada_name="LStat" 
		 test="19" inline="1" os="Darwin *">
			<includes>
				<include file="unistd.h"/>
				<include file="sys/stat.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="P'Address"/>
			<c_arg name="buf" type="System.Address" from="Stat'Address"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Stat" io="out" type="s_stat" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="S_ISREG" rname="R" return="int_t" ada_type="function" ada_name="S_ISREG" 
		 ada_return="Boolean" ada_return_from="R /= 0" prefix="adafpx_macro_"
		 macro="int adafpx_macro_S_ISREG(mode_t m) { return S_ISREG(m); }" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="m"    type="mode_t"  from="Mode"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
		</func>
		<func name="S_ISDIR" rname="R" return="int_t" ada_type="function" ada_name="S_ISDIR" 
		 ada_return="Boolean" ada_return_from="R /= 0" prefix="adafpx_macro_"
		 macro="int adafpx_macro_S_ISDIR(mode_t m) { return S_ISDIR(m); }" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="m"    type="mode_t"  from="Mode"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
		</func>
		<func name="S_ISCHR" rname="R" return="int_t" ada_type="function" ada_name="S_ISCHR" 
		 ada_return="Boolean" ada_return_from="R /= 0" prefix="adafpx_macro_"
		 macro="int adafpx_macro_S_ISCHR(mode_t m) { return S_ISCHR(m); }" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="m"    type="mode_t"  from="Mode"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
		</func>
		<func name="S_ISBLK" rname="R" return="int_t" ada_type="function" ada_name="S_ISBLK" 
		 ada_return="Boolean" ada_return_from="R /= 0" prefix="adafpx_macro_"
		 macro="int adafpx_macro_S_ISBLK(mode_t m) { return S_ISBLK(m); }" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="m"    type="mode_t"  from="Mode"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
		</func>
		<func name="S_ISFIFO" rname="R" return="int_t" ada_type="function" ada_name="S_ISFIFO" 
		 ada_return="Boolean" ada_return_from="R /= 0" prefix="adafpx_macro_"
		 macro="int adafpx_macro_S_ISFIFO(mode_t m) { return S_ISFIFO(m); }" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="m"    type="mode_t"  from="Mode"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
		</func>
		<func name="S_ISLNK" rname="R" return="int_t" ada_type="function" ada_name="S_ISLNK" 
		 ada_return="Boolean" ada_return_from="R /= 0" prefix="adafpx_macro_"
		 macro="int adafpx_macro_S_ISLNK(mode_t m) { return S_ISLNK(m); }" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="m"    type="mode_t"  from="Mode"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
		</func>
		<func name="S_ISSOCK" rname="R" return="int_t" ada_type="function" ada_name="S_ISSOCK" 
		 ada_return="Boolean" ada_return_from="R /= 0" prefix="adafpx_macro_"
		 macro="int adafpx_macro_S_ISSOCK(mode_t m) { return S_ISSOCK(m); }" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="m"    type="mode_t"  from="Mode"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
		</func>
		<func name="setuid" return="int_t" ada_type="procedure" rname="R" ada_name="Setuid" 
		 test="27" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="uid" type="uid_t" from="Uid"/>
			<ada_arg name="Uid" io="in" type="uid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="setgid" return="int_t" ada_type="procedure" rname="R" ada_name="Setgid" 
		 test="27" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="gid" type="gid_t" from="Gid"/>
			<ada_arg name="Gid" io="in" type="gid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="seteuid" return="int_t" ada_type="procedure" rname="R" ada_name="Seteuid" 
		 test="27" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="euid" type="uid_t" from="Effective_Uid"/>
			<ada_arg name="Effective_Uid" io="in" type="uid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="setegid" return="int_t" ada_type="procedure" rname="R" ada_name="Setegid" 
		 test="27" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="egid" type="gid_t" from="Effective_Gid"/>
			<ada_arg name="Effective_Gid" io="in" type="gid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="ptrace" return="int_t" ada_type="procedure" rname="Status" ada_name="PTrace" inline="1" os="Darwin *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ptrace.h"/>
			</includes>
			<c_arg name="req" type="ptrace_t" from="Request"/>
			<c_arg name="pid" type="pid_t" from="PID"/>
			<c_arg name="addr" type="System.Address" from="Addr"/>
			<c_arg name="data" type="int_t" from="Data"/>
			<ada_arg name="Request" io="in" type="ptrace_t"/>
			<ada_arg name="PID" io="in" type="pid_t"/>
			<ada_arg name="Addr" io="in" type="System.Address"/>
			<ada_arg name="Data" io="in" type="int_t"/>	
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="alarm" return="uint_t" ada_type="procedure" rname="R" ada_name="Alarm" 
		 test="15" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="seconds" type="uint_t" from="Seconds"/>
			<ada_arg name="Seconds" io="in out" type="uint_t" from="R"/>
		</func>
		<func name="pause" return="int_t" ada_type="procedure" rname="R" ada_name="Pause" 
		 test="15" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="utime" return="int_t" ada_type="procedure" rname="R" ada_name="UTime" 
		 test="16" inline="1">
			<includes>
				<include file="utime.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="P'Address"/>
			<c_arg name="times" type="System.Address" from="Times'Address"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Times" io="in" type="s_utimbuf" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="utimes" return="int_t" ada_type="procedure" rname="R" ada_name="UTimes" 
		 test="16" inline="1">
			<includes>
				<include file="sys/time.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="P'Address"/>
			<c_arg name="times" type="System.Address" from="System.Null_Address"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="utimes" return="int_t" ada_type="procedure" rname="R" ada_name="UTimes" 
		 test="16" inline="1">
			<includes>
				<include file="sys/time.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="P'Address"/>
			<c_arg name="times" type="System.Address" from="Times(Times'First)'Address"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Times" io="in" type="s_timeval_array2"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="futimes" return="int_t" ada_type="procedure" rname="R" ada_name="FUTimes" 
		 test="16" inline="1">
			<includes>
				<include file="sys/time.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<c_arg name="times" type="System.Address" from="Times(Times'First)'Address"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Times" io="in" type="s_timeval_array2"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="access" return="int_t" ada_type="procedure" rname="R" ada_name="Test_Access" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="P'Address"/>
			<c_arg name="amode" type="amode_t" from="Access_Mode"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Access_Mode" io="in" type="amode_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="nice" return="int_t" ada_type="procedure" rname="R" ada_name="Nice" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="incr" type="int_t" from="Incr"/>
			<ada_arg name="Incr" io="in out" type="int_t" from="R"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="sync" ada_type="procedure" ada_name="Sync" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
		</func>
		<func name="fsync" return="int_t" ada_type="procedure" rname="R" ada_name="FSync" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="fd" type="fd_t" from="Fd"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="kill" return="int_t" ada_type="procedure" rname="R" ada_name="Kill" 
		 test="7" inline="1">
			<includes>
				<include file="signal.h"/>
			</includes>
			<c_arg name="pid" type="pid_t" from="PID"/>
			<c_arg name="sig" type="sig_t" from="Signal"/>
			<ada_arg name="PID" io="in" type="pid_t"/>
			<ada_arg name="Signal" io="in" type="sig_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="rename" return="int_t" ada_type="procedure" rname="R" ada_name="Rename" inline="1">
			<includes>
				<include file="stdio.h"/>
			</includes>
			<c_arg name="opath" type="System.Address" from="T1'Address"/>
			<c_arg name="npath" type="System.Address" from="T2'Address"/>
			<ada_arg name="Old_Path" io="in" type="String"/>
			<ada_arg name="New_Path" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="T1" type="String" init="C_String(Old_Path)"/>
			<temp name="T2" type="String" init="C_String(New_Path)"/>
		</func>
		<func name="mkdir" return="int_t" ada_type="procedure" rname="R" ada_name="Mkdir" 
		 test="11" inline="1">
			<includes>
				<include file="sys/stat.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="P'Address"/>
			<c_arg name="mode" type="mode_t" from="Mode"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="rmdir" return="int_t" ada_type="procedure" rname="R" ada_name="Rmdir" 
		 test="11" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="path" type="System.Address" from="P'Address"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="pipe" return="int_t" ada_type="procedure" rname="R" ada_name="Pipe" 
		 test="12" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="fds" type="System.Address" from="T'Address"/>
			<ada_arg name="Read_Fd" io="out" type="fd_t" from="T(0)"/>
			<ada_arg name="Write_Fd" io="out" type="fd_t" from="T(1)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="T" type="fd_array(0..1)" init="(0,0)"/>
		</func>
		<func name="pipe2" return="int_t" ada_type="procedure" rname="R" ada_name="Pipe2" inline="1" 
		 test="13" os="Linux *|FreeBSD *">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="fds" type="System.Address" from="T'Address"/>
			<c_arg name="flags" type="uint_t" from="Flags"/>
			<ada_arg name="Flags" io="in" type="uint_t"/>
			<ada_arg name="Read_Fd" io="out" type="fd_t" from="T(0)"/>
			<ada_arg name="Write_Fd" io="out" type="fd_t" from="T(1)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="T" type="fd_array(0..1)" init="(0,0)"/>
		</func>
		<func name="times" return="clock_t" ada_type="procedure" rname="R" ada_name="Times" 
		 test="14" inline="1">
			<includes>
				<include file="sys/times.h"/>
			</includes>
			<c_arg name="buf" type="System.Address" from="Buf'Address"/>
			<ada_arg name="Buf" io="out" type="s_tms" from="implied"/>
                        <ada_arg name="Ticks" io="out" type="clock_t" from="To_Clock(R)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="signal" return="sig_t" ada_type="procedure" rname="R" ada_name="Signal" 
		 test="15" inline="1">
			<includes>
				<include file="signal.h"/>
			</includes>
			<c_arg name="sig" type="sig_t" from="Sig"/>
			<c_arg name="func" type="sigproc_t" from="Handler"/>
			<ada_arg name="Sig" io="in" type="sig_t"/>
                        <ada_arg name="Handler" io="in" type="sigproc_t"/>
			<ada_arg name="Prior_Action" io="out" type="sig_t" from="R"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="signal" return="sig_t" ada_type="procedure" rname="R" ada_name="Signal" 
		 test="15" inline="1">
			<includes>
				<include file="signal.h"/>
			</includes>
			<c_arg name="sig" type="sig_t" from="Sig"/>
			<c_arg name="func" type="sigproc_t" from="Handler"/>
			<ada_arg name="Sig" io="in" type="sig_t"/>
                        <ada_arg name="Handler" io="in" type="sigproc_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="acct" return="int_t" ada_type="procedure" rname="R" ada_name="Acct" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="file" type="System.Address" from="P'Address"/>
			<ada_arg name="File" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(File)"/>
		</func>
		<func name="umask" return="mode_t" ada_type="procedure" rname="R" ada_name="UMask" 
		 test="17" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/stat.h"/>
			</includes>
			<c_arg name="cmask" type="mode_t" from="CMask"/>
			<ada_arg name="CMask" io="in" type="mode_t"/>
			<ada_arg name="OMask" io="out" type="mode_t" from="R"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="chroot" return="int_t" ada_type="procedure" rname="R" ada_name="Chroot" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg name="dirname" type="System.Address" from="P'Address"/>
			<ada_arg name="Dirname" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Dirname)"/>
		</func>
		<func name="setsid" return="pid_t" ada_type="function" rname="R" ada_name="Setsid" 
		 ada_return="pid_t" ada_return_from="R"
		 test="27" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
		</func>
		<func name="sigaddset" ada_type="procedure" ada_name="Sigaddset" 
		 prefix="adafpx_macro_"
		 macro="void adafpx_macro_sigaddset(sigset_t *set,int signo) { sigaddset(set,signo); }" 
		 test="28" inline="1">
			<includes>
				<include file="signal.h"/>
			</includes>
			<c_arg   name="set"   type="System.Address"  from="Set'Address"/>
			<c_arg   name="signo" type="int_t" from="int_t(Signo)"/>
			<ada_arg name="Set"   io="in out"  type="sigset_t" from="implied"/>
			<ada_arg name="Signo" io="in"      type="sig_t"/>
		</func>
		<func name="sigdelset" ada_type="procedure" ada_name="Sigdelset" 
		 prefix="adafpx_macro_"
		 macro="void adafpx_macro_sigdelset(sigset_t *set,int signo) { sigdelset(set,signo); }" 
		 test="28" inline="1">
			<includes>
				<include file="signal.h"/>
			</includes>
			<c_arg   name="set"   type="System.Address"  from="Set'Address"/>
			<c_arg   name="signo" type="int_t" from="int_t(Signo)"/>
			<ada_arg name="Set"   io="in out"  type="sigset_t" from="implied"/>
			<ada_arg name="Signo" io="in"      type="sig_t"/>
		</func>
		<func name="sigismember" rname="R" return="int_t" ada_type="function" ada_name="Sigismember" 
		 ada_return="Boolean" ada_return_from="R /= 0" prefix="adafpx_macro_"
		 macro="int adafpx_macro_sigismember(sigset_t *set,int signo) { return sigismember(set,signo) > 0; }" 
		 test="28" inline="1">
			<includes>
				<include file="signal.h"/>
			</includes>
			<c_arg   name="set"   type="System.Address"  from="Set'Address"/>
			<c_arg   name="signo" type="int_t" from="int_t(Signo)"/>
			<ada_arg name="Set"   io="in"      type="sigset_t"/>
			<ada_arg name="Signo" io="in"      type="sig_t"/>
		</func>
		<func name="sigemptyset" ada_type="procedure" ada_name="Sigemptyset" 
		 prefix="adafpx_macro_"
		 macro="void adafpx_macro_sigemptyset(sigset_t *set) { sigemptyset(set); }" 
		 test="28" inline="1">
			<includes>
				<include file="signal.h"/>
			</includes>
			<c_arg   name="set"   type="System.Address"  from="Set'Address"/>
			<ada_arg name="Set"   io="out"      type="sigset_t" from="implied"/>
		</func>
		<func name="sigfillset" ada_type="procedure" ada_name="Sigfillset" 
		 prefix="adafpx_macro_"
		 macro="void adafpx_macro_sigfillset(sigset_t *set) { sigfillset(set); }" 
		 test="28" inline="1">
			<includes>
				<include file="signal.h"/>
			</includes>
			<c_arg   name="set"   type="System.Address"  from="Set'Address"/>
			<ada_arg name="Set"   io="out"      type="sigset_t" from="implied"/>
		</func>
		<func name="sigsuspend" return="int_t" ada_type="procedure" rname="R" ada_name="Sigsuspend" 
		 test="29" inline="1">
			<includes>
				<include file="signal.h"/>
			</includes>
			<c_arg   name="sigmask" type="System.Address" from="Sigmask'Address"/>
			<ada_arg name="Sigmask" io="in" type="sigset_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="sigprocmask" return="int_t" ada_type="procedure" rname="R" ada_name="Sigprocmask" 
		 test="29" inline="1">
			<includes>
				<include file="signal.h"/>
			</includes>
			<c_arg	 name="how"     type="int_t" from="int_t(How)"/>
			<c_arg   name="set"     type="System.Address" from="Set'Address"/>
			<c_arg   name="oset"    type="System.Address" from="Old_Set'Address"/>
			<ada_arg name="How"     io="in" type="sigpmop_t"/>
			<ada_arg name="Set"     io="in" type="sigset_t"/>
			<ada_arg name="Old_Set"	io="in" type="sigset_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="sigprocmask" return="int_t" ada_type="procedure" rname="R" ada_name="Sigprocmask" 
		 test="29" inline="1">
			<includes>
				<include file="signal.h"/>
			</includes>
			<c_arg	 name="how"     type="int_t" from="int_t(How)"/>
			<c_arg   name="set"     type="System.Address" from="Set'Address"/>
			<c_arg   name="oset"    type="System.Address" from="System.Null_Address"/>
			<ada_arg name="How"     io="in" type="sigpmop_t"/>
			<ada_arg name="Set"     io="in" type="sigset_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="sigpending" return="int_t" ada_type="procedure" rname="R" ada_name="Sigpending" 
		 test="29" inline="1">
			<includes>
				<include file="signal.h"/>
			</includes>
			<c_arg   name="set" type="System.Address" from="Set'Address"/>
			<ada_arg name="Set" io="out" type="sigset_t" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="gethostname" return="int_t" ada_type="procedure" rname="R" ada_name="Gethostname" 
		 test="30" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="name" type="System.Address" from="Name'Address"/>
			<c_arg   name="namelen" type="int_t" from="Name'Length"/>
			<ada_arg name="Name" io="out" type="String" from="implied"/>
                        <ada_arg name="Last" io="out" type="Natural" from="C_Last(Name)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="sethostname" return="int_t" ada_type="procedure" rname="R" ada_name="Sethostname" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="name" type="System.Address" from="Name'Address"/>
			<c_arg   name="namelen" type="int_t" from="Name'Length"/>
			<ada_arg name="Name" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="getrlimit" return="int_t" ada_type="procedure" rname="R" ada_name="Getrlimit" 
		 test="31" inline="1">
			<includes>
				<include file="sys/resource.h"/>
			</includes>
			<c_arg   name="resource" type="rlimkind_t" from="Resource"/>
			<c_arg   name="rlp" type="System.Address" from="Rlimit'Address"/>
			<ada_arg name="Resource" io="in" type="rlimkind_t"/>
			<ada_arg name="Rlimit" io="out" type="s_rlimit" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="setrlimit" return="int_t" ada_type="procedure" rname="R" ada_name="Setrlimit" 
		 test="31" inline="1">
			<includes>
				<include file="sys/resource.h"/>
			</includes>
			<c_arg   name="resource" type="rlimkind_t" from="Resource"/>
			<c_arg   name="rlp" type="System.Address" from="Rlimit'Address"/>
			<ada_arg name="Resource" io="in" type="rlimkind_t"/>
			<ada_arg name="Rlimit" io="in" type="s_rlimit"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="getrusage" return="int_t" ada_type="procedure" rname="R" ada_name="Getrusage" 
		 test="32" inline="1">
			<includes>
				<include file="sys/resource.h"/>
			</includes>
			<c_arg   name="who" type="rwho_t" from="Who"/>
			<c_arg   name="r_usage" type="System.Address" from="R_Usage'Address"/>
			<ada_arg name="Who" io="in" type="rwho_t"/>
			<ada_arg name="R_Usage" io="out" type="s_rusage" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="tzset" ada_type="procedure" ada_name="Tzset" 
		 test="33" inline="1">
			<includes>
				<include file="time.h"/>
			</includes>
		</func>
		<func name="tzsetwall" ada_type="procedure" ada_name="Tzsetwall" inline="1" os="FreeBSD *|Darwin *">
			<includes>
				<include file="time.h"/>
			</includes>
		</func>
		<func name="gettimeofday" return="int_t" ada_type="procedure" rname="R" ada_name="Gettimeofday" 
		 test="33" inline="1">
			<includes>
				<include file="sys/time.h"/>
			</includes>
			<c_arg   name="tp" type="System.Address" from="Time'Address"/>
			<c_arg   name="tzp" type="System.Address" from="System.Null_Address"/>
			<ada_arg name="Time" io="out" type="s_timeval" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="settimeofday" return="int_t" ada_type="procedure" rname="R" ada_name="Settimeofday" inline="1">
			<includes>
				<include file="sys/time.h"/>
			</includes>
			<c_arg   name="tp" type="System.Address" from="Time'Address"/>
			<c_arg   name="tzp" type="System.Address" from="System.Null_Address"/>
			<ada_arg name="Time" io="in" type="s_timeval"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="getgroups" return="int_t" ada_type="procedure" rname="R" ada_name="Getgroups" 
		 test="34" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="gidsetsize" type="int_t" from="Grouplist'Length"/>
			<c_arg   name="grouplist" type="System.Address" from="Grouplist'Address"/>
			<ada_arg name="Grouplist" io="out" type="gid_array" from="implied"/>
			<ada_arg name="Count" io="out" type="Natural" from="To_Count(R)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="setgroups" return="int_t" ada_type="procedure" rname="R" ada_name="Setgroups" 
		 test="34" inline="1">
			<includes>
				<include file="sys/param.h"/>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="ngroups" type="int_t" from="Grouplist'Length"/>
			<c_arg   name="grouplist" type="System.Address" from="Grouplist'Address"/>
			<ada_arg name="Grouplist" io="in" type="gid_array"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="symlink" return="int_t" ada_type="procedure" rname="R" ada_name="Symlink" 
		 test="10" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="path1" type="System.Address" from="P1'Address"/>
			<c_arg   name="path2" type="System.Address" from="P2'Address"/>
			<ada_arg name="Path1" io="in" type="String"/>
			<ada_arg name="Path2" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P1" type="String" init="C_String(Path1)"/>
			<temp name="P2" type="String" init="C_String(Path2)"/>
		</func>
		<func name="swapon" return="int_t" ada_type="procedure" rname="R" ada_name="Swapon" inline="1" os="Linux *">
			<includes>
				<include file="unistd.h"/>
				<include file="asm/page.h"/>
				<include file="sys/swap.h"/>
			</includes>
			<c_arg   name="path" type="System.Address" from="P'Address"/>
			<c_arg   name="flags" type="uint_t" from="Flags"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Flags" io="in" type="uint_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="swapoff" return="int_t" ada_type="procedure" rname="R" ada_name="Swapoff" inline="1" os="Linux *">
			<includes>
				<include file="unistd.h"/>
				<include file="asm/page.h"/>
				<include file="sys/swap.h"/>
			</includes>
			<c_arg   name="path" type="System.Address" from="P'Address"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="opendir" return="DIR" ada_type="procedure" rname="R" ada_name="Opendir" 
		 test="35" inline="1" os="Linux *|FreeBSD *">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
			<c_arg   name="name" type="System.Address" from="N'Address"/>
			<ada_arg name="Name" io="in" type="String"/>
			<ada_arg name="Dir_Stream" io="out" type="DIR" from="R"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="N" type="String" init="C_String(Name)"/>
		</func>
		<func name="opendir$INODE64" altname="UX_opendir" return="DIR" ada_type="procedure" rname="R" ada_name="Opendir" 
		 test="35" inline="1" os="Darwin *">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
			<c_arg   name="name" type="System.Address" from="N'Address"/>
			<ada_arg name="Name" io="in" type="String"/>
			<ada_arg name="Dir_Stream" io="out" type="DIR" from="R"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="N" type="String" init="C_String(Name)"/>
		</func>
		<func name="fdopendir" return="DIR" ada_type="procedure" rname="R" ada_name="FdOpendir" 
		 test="35" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
			<c_arg   name="fd" type="fd_t" from="Fd"/>
			<ada_arg name="Fd" io="in" type="fd_t"/>
			<ada_arg name="Dir_Stream" io="out" type="DIR" from="R"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="readdir_r" return="int_t" ada_type="procedure" rname="R" ada_name="Readdir" 
		 test="35" inline="1" os="Linux *|FreeBSD *">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
			<use_clauses>
				<use name="System"/>
			</use_clauses>
			<c_arg   name="dirp" type="DIR" from="Directory"/>
			<c_arg   name="direntry" type="System.Address" from="Dir_Entry'Address"/>
			<c_arg   name="result" type="System.Address" from="Result'Address"/>
			<ada_arg name="Directory" io="in" type="DIR"/>
			<ada_arg name="Dir_Entry" io="out" type="s_dirent" from="implied"/>
			<ada_arg name="End_File" io="out" type="Boolean" from="Result = Null_Address"/>
			<ada_arg name="Error" io="out" type="errno_t" from="errno_t(R)"/>
			<temp name="Result" type="System.Address" init="System.Null_Address"/>
		</func>
		<func name="readdir_r$INODE64" altname="UX_readdir" return="int_t" ada_type="procedure" rname="R" ada_name="Readdir" 
		 test="35" inline="1" os="Darwin *">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
			<use_clauses>
				<use name="System"/>
			</use_clauses>
			<c_arg   name="dirp" type="DIR" from="Directory"/>
			<c_arg   name="direntry" type="System.Address" from="Dir_Entry'Address"/>
			<c_arg   name="result" type="System.Address" from="Result'Address"/>
			<ada_arg name="Directory" io="in" type="DIR"/>
			<ada_arg name="Dir_Entry" io="out" type="s_dirent" from="implied"/>
			<ada_arg name="End_File" io="out" type="Boolean" from="Result = Null_Address"/>
			<ada_arg name="Error" io="out" type="errno_t" from="errno_t(R)"/>
			<temp name="Result" type="System.Address" init="System.Null_Address"/>
		</func>
		<func name="rewinddir" ada_type="procedure" ada_name="Rewinddir" 
		 test="35" inline="1" os="Linux *|FreeBSD *">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
			<c_arg   name="dirp" type="DIR" from="Directory"/>
			<ada_arg name="Directory" io="in" type="DIR"/>
		</func>
		<func name="rewinddir$INODE64" altname="UX_rewinddir" ada_type="procedure" ada_name="Rewinddir" 
		 test="35" inline="1" os="Darwin *">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
			<c_arg   name="dirp" type="DIR" from="Directory"/>
			<ada_arg name="Directory" io="in" type="DIR"/>
		</func>
		<func name="dirfd" return="int_t" ada_type="procedure" rname="R" ada_name="DirFd" 
		 test="35" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
			<c_arg   name="dirp" type="DIR" from="Directory"/>
			<ada_arg name="Directory" io="in" type="DIR"/>
			<ada_arg name="Fd" io="out" type="fd_t" from="fd_t(R)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="telldir" return="long_t" ada_type="procedure" rname="R" ada_name="Telldir" 
		 test="35" inline="1" os="Linux *|FreeBSD *">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
			<c_arg   name="dirp" type="DIR" from="Directory"/>
			<ada_arg name="Directory" io="in" type="DIR"/>
			<ada_arg name="Pos" io="out" type="long_t" from="R"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="telldir$INODE64" altname="UX_telldir" return="long_t" ada_type="procedure" rname="R" ada_name="Telldir" 
		 test="35" inline="1" os="Darwin *">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
			<c_arg   name="dirp" type="DIR" from="Directory"/>
			<ada_arg name="Directory" io="in" type="DIR"/>
			<ada_arg name="Pos" io="out" type="long_t" from="R"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="seekdir" return="long_t" ada_type="procedure" rname="R" ada_name="Seekdir" 
		 test="35" inline="1" os="Linux *|FreeBSD *">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
			<c_arg   name="dirp" type="DIR" from="Directory"/>
			<c_arg   name="pos"  type="long_t" from="Pos"/>
			<ada_arg name="Directory" io="in" type="DIR"/>
			<ada_arg name="Pos" io="in" type="long_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="seekdir$INODE64" altname="UX_seekdir" return="long_t" ada_type="procedure" rname="R" ada_name="Seekdir" 
		 test="35" inline="1" os="Darwin *">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
			<c_arg   name="dirp" type="DIR" from="Directory"/>
			<c_arg   name="pos"  type="long_t" from="Pos"/>
			<ada_arg name="Directory" io="in" type="DIR"/>
			<ada_arg name="Pos" io="in" type="long_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="closedir" return="int_t" ada_type="procedure" rname="R" ada_name="Closedir" 
		 test="35" inline="1">
			<includes>
				<include file="sys/types.h"/>
				<include file="dirent.h"/>
			</includes>
			<c_arg   name="dirp" type="DIR" from="Directory"/>
			<ada_arg name="Directory" io="in" type="DIR"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="mmap" return="System.Address" ada_type="procedure" rname="R" ada_name="MMap" 
		 test="36" inline="1">
			<includes>
				<include file="sys/mmap.h"/>
			</includes>
			<c_arg   name="addr"  type="System.Address" from="Addr"/>
			<c_arg   name="len"   type="size_t" from="Len"/>
			<c_arg	 name="prot"  type="mprot_t" from="Prot"/>
			<c_arg	 name="flags" type="mmap_t" from="Flags"/>
			<c_arg	 name="fd"    type="fd_t"   from="Fd"/>
			<c_arg	 name="offset" type="off_t" from="Offset"/>
			<ada_arg name="Addr"  io="in out"  type="System.Address" from="R"/>
			<ada_arg name="Len"   io="in"  type="size_t"/>
			<ada_arg name="Prot"  io="in"  type="mprot_t"/>
			<ada_arg name="Flags" io="in"  type="mmap_t"/>
			<ada_arg name="Fd"    io="in"  type="fd_t"/>
			<ada_arg name="Offset" io="in"  type="off_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="munmap" return="int_t" ada_type="procedure" rname="R" ada_name="MUnmap" 
		 test="36" inline="1">
			<includes>
				<include file="sys/mmap.h"/>
			</includes>
			<c_arg   name="addr"  type="System.Address" from="Addr"/>
			<c_arg   name="len"   type="size_t" from="Len"/>
			<ada_arg name="Addr"  io="in"  type="System.Address"/>
			<ada_arg name="Len"   io="in"  type="size_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="sysconf" return="long_t" ada_type="procedure" rname="R" ada_name="Sysconf" 
		 test="36" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="name"  type="sysc_t" from="Name"/>
			<ada_arg name="Name"  io="in"  type="sysc_t"/>
			<ada_arg name="Parm"  io="out" type="long_t"  from="R"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="truncate" return="int_t" ada_type="procedure" rname="R" ada_name="Truncate" 
		 test="1" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="name"  type="System.Address" from="N'Address"/>
			<c_arg   name="len"  type="off_t" from="Len"/>
			<ada_arg name="Name"  io="in" type="String"/>
			<ada_arg name="Len"   io="in" type="off_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="N" type="String" init="C_String(Name)"/>
		</func>
		<func name="ftruncate" return="int_t" ada_type="procedure" rname="R" ada_name="Truncate" 
		 test="1" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg   name="fd"  type="fd_t" from="Fd"/>
			<c_arg   name="len"  type="off_t" from="Len"/>
			<ada_arg name="Fd"    io="in" type="fd_t"/>
			<ada_arg name="Len"   io="in" type="off_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="getpriority" return="int_t" ada_type="procedure" rname="R" ada_name="Getpriority" 
		 test="37" inline="1">
			<includes>
				<include file="sys/resource.h"/>
			</includes>
			<c_arg   name="which" type="prio_t" from="Which"/>
			<c_arg   name="who"   type="id_t" from="Who"/>
			<ada_arg name="Which" io="in" type="prio_t"/>
			<ada_arg name="Who"   io="in" type="id_t"/>
			<ada_arg name="Pri"   io="out" type="int_t" from="R"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="setpriority" return="int_t" ada_type="procedure" rname="R" ada_name="Setpriority" 
		 test="37" inline="1">
			<includes>
				<include file="sys/resource.h"/>
			</includes>
			<c_arg   name="which" type="prio_t" from="Which"/>
			<c_arg   name="who"   type="id_t" from="Who"/>
			<c_arg   name="prior" type="int_t" from="Prior"/>
			<ada_arg name="Which" io="in" type="prio_t"/>
			<ada_arg name="Who"   io="in" type="id_t"/>
			<ada_arg name="Prior" io="in" type="int_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="statfs" return="int_t" ada_type="procedure" rname="R" ada_name="Statfs" inline="1">
			<includes>
				<include file="sys/vfs.h"/>
			</includes>
			<c_arg   name="path"  type="System.Address" from="P'Address"/>
			<c_arg   name="buf"   type="System.Address" from="Buf'Address"/>
			<ada_arg name="Path"  io="in" type="String"/>
			<ada_arg name="Buf"   io="out" type="s_statfs" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<temp name="P" type="String" init="C_String(Path)"/>
		</func>
		<func name="fstatfs" return="int_t" ada_type="procedure" rname="R" ada_name="FStatfs" inline="1">
			<includes>
				<include file="sys/vfs.h"/>
			</includes>
			<c_arg   name="fd"    type="fd_t" from="Fd"/>
			<c_arg   name="buf"   type="System.Address" from="Buf'Address"/>
			<ada_arg name="Fd"    io="in" type="Fd_t"/>
			<ada_arg name="Buf"   io="out" type="s_statfs" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="closelog" ada_type="procedure" ada_name="CloseLog" inline="1">
			<includes>
				<include file="syslog.h"/>
			</includes>
		</func>
		<func name="openlog" ada_type="procedure" ada_name="OpenLog" inline="1">
			<includes>
				<include file="syslog.h"/>
			</includes>
			<c_arg   name="ident"  type="System.Address" from="N'Address"/>
			<c_arg   name="logopt" type="logopt_t" from="Log_Option"/>
			<c_arg   name="facility" type="logfac_t" from="Facility"/>
			<ada_arg name="Ident"      io="in" type="String"/>
			<ada_arg name="Log_Option" io="in" type="logopt_t"/>
			<ada_arg name="Facility"   io="in" type="logfac_t"/>
			<temp name="N" type="String" init="C_String(Ident)"/>
		</func>
		<func name="setlogmask" return="uint_t" rname="R" ada_type="procedure" ada_name="Setlogmask" inline="1">
			<includes>
				<include file="syslog.h"/>
			</includes>
			<c_arg   name="maskpri"  type="uint_t" from="Mask_Pri"/>
			<ada_arg name="Mask_Pri" io="in out" type="uint_t" from="R"/>
		</func>
		<func name="LOG_MASK" return="uint_t" rname="R" ada_type="function" ada_name="LOG_MASK" 
		 ada_return="uint_t" ada_return_from="R" prefix="adafpx_macro_"
		 macro="unsigned adafpx_macro_LOG_MASK(int p) { return LOG_MASK(p); }"
		 inline="1" os="Linux *"
		>
			<includes>
				<include file="syslog.h"/>
			</includes>
			<c_arg   name="pri"  type="int_t" from="Priority"/>
			<ada_arg name="Priority" io="in" type="int_t"/>
		</func>
		<func name="syslog" ada_type="procedure" ada_name="Syslog">
			<includes>
				<include file="syslog.h"/>
			</includes>
			<c_arg   name="priority" type="int_t" from="Priority"/>
			<c_arg   name="format"   type="System.Address" from="Fmt'Address"/>
			<c_arg   name="msg"      type="System.Address" from="Msg'Address"/>
			<ada_arg name="Priority" io="in" type="int_t"/>
			<ada_arg name="Message"  io="in" type="String"/>
                        <temp name="F" type="constant String" init="('%','s',Ada.Characters.Latin_1.LF)"/>
			<temp name="Fmt" type="String" init="C_String(F)"/>
			<temp name="Msg" type="String" init="C_String(Message)"/>
		</func>
		<func name="getitimer" return="int_t" ada_type="procedure" rname="R" ada_name="Getitimer" inline="1">
			<includes>
				<include file="sys/time.h"/>
			</includes>
			<c_arg   name="which"  type="itim_t" from="Which"/>
			<c_arg   name="curr"   type="System.Address" from="Cur_Value'Address"/>
			<ada_arg name="Which"  io="in" type="itim_t"/>
			<ada_arg name="Cur_Value" io="out" type="s_itimerval" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="setitimer" return="int_t" ada_type="procedure" rname="R" ada_name="Setitimer" inline="1">
			<includes>
				<include file="sys/time.h"/>
			</includes>
			<c_arg   name="which"  type="itim_t" from="Which"/>
			<c_arg   name="curr"   type="System.Address" from="Cur_Value'Address"/>
			<ada_arg name="Which"  io="in" type="itim_t"/>
			<ada_arg name="Cur_Value" io="in" type="s_itimerval"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="vhangup" return="int_t" ada_type="procedure" rname="R" ada_name="VHangup" inline="1" os="Linux *">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="uname" return="int_t" ada_type="procedure" rname="R" ada_name="Uname" inline="1">
			<includes>
				<include file="sys/utsname.h"/>
			</includes>
			<c_arg   name="names" type="System.Address" from="Names'Address"/>
			<ada_arg name="Names" io="out" type="s_utsname" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="sysinfo" return="int_t" ada_type="procedure" rname="R" ada_name="Sysinfo" os="Linux *" inline="1">
			<includes>
				<include file="sys/sysinfo.h"/>
			</includes>
			<c_arg   name="info"  type="System.Address" from="Info'Address"/>
			<ada_arg name="Info"  io="out" type="s_sysinfo" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="getuid" rname="R" return="uid_t" ada_type="function" ada_name="Getuid" 
		 ada_return="uid_t" ada_return_from="R"
		 inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
		</func>
		<func name="geteuid" rname="R" return="uid_t" ada_type="function" ada_name="Geteuid" 
		 ada_return="uid_t" ada_return_from="R"
		 test="18" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
		</func>
		<func name="getgid" return="gid_t" ada_type="function" rname="R" ada_name="Getgid" 
		 ada_return="gid_t" ada_return_from="R"
		 inline="1">
			<includes>
				<include file="unistd.h"/>
				<include file="sys/types.h"/>
			</includes>
		</func>
		<func name="getegid" return="gid_t" ada_type="function" rname="R" ada_name="Getegid" 
		 ada_return="gid_t" ada_return_from="R"
		 test="18" inline="1">
			<includes>
				<include file="unistd.h"/>
				<include file="sys/types.h"/>
			</includes>
		</func>
		<func name="getsid" return="pid_t" ada_type="procedure" rname="r" ada_name="Getsid"
		 test="27" inline="1">
			<includes>
				<include file="unistd.h"/>
			</includes>
			<c_arg	name="pid" type="pid_t" from="PID"/>
			<ada_arg name="PID" io="in" type="pid_t"/>
			<ada_arg name="SID" io="out" type="pid_t" from="Pos_PID(R)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="msgctl" return="int_t" ada_type="procedure" rname="R" ada_name="Msgctl_Get" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/msg.h"/>
			</includes>
			<c_arg   name="msqid" type="int_t" from="Msqid"/>
			<c_arg   name="cmd"   type="ipccmd_t" from="Cmd"/>
			<c_arg	 name="buf"   type="System.Address" from="Buf'Address"/>
			<ada_arg name="Msqid" io="in" type="int_t"/>
			<ada_arg name="Cmd"   io="in" type="ipccmd_t"/>
			<ada_arg name="Buf"   io="out" type="s_msqid_ds" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<cases name="Cmd">
				<case name="IPC_STAT"/>
				<case name="MSG_STAT"/>
			</cases>
		</func>
		<func name="msgctl" return="int_t" ada_type="procedure" rname="R" ada_name="Msgctl_Get" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/msg.h"/>
			</includes>
			<c_arg   name="msqid" type="int_t" from="Msqid"/>
			<c_arg   name="cmd"   type="ipccmd_t" from="Cmd"/>
			<c_arg	 name="buf"   type="System.Address" from="Buf'Address"/>
			<ada_arg name="Msqid" io="in" type="int_t"/>
			<ada_arg name="Cmd"   io="in" type="ipccmd_t"/>
			<ada_arg name="Buf"   io="out" type="s_msginfo" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<cases name="Cmd">
				<case name="IPC_INFO"/>
				<case name="MSG_INFO"/>
			</cases>
		</func>
		<func name="msgctl" return="int_t" ada_type="procedure" rname="R" ada_name="Msgctl_Set" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/msg.h"/>
			</includes>
			<c_arg   name="msqid" type="int_t" from="Msqid"/>
			<c_arg   name="cmd"   type="ipccmd_t" from="Cmd"/>
			<c_arg	 name="buf"   type="System.Address" from="Buf'Address"/>
			<ada_arg name="Msqid" io="in" type="int_t"/>
			<ada_arg name="Cmd"   io="in" type="ipccmd_t"/>
			<ada_arg name="Buf"   io="in" type="s_msqid_ds"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<cases name="Cmd">
				<case name="IPC_SET"/>
				<case name="IPC_RMID"/>
			</cases>
		</func>
		<func name="msgget" return="int_t" ada_type="procedure" rname="R" ada_name="Msgget" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/msg.h"/>
			</includes>
			<c_arg   name="key"   type="key_t" from="Key"/>
			<c_arg   name="msgflg" type="uint_t" from="Msgflg"/>
			<ada_arg name="Key"   io="in" type="key_t"/>
			<ada_arg name="Msgflg" io="in" type="uint_t"/>
			<ada_arg name="Msqqid" io="out" type="int_t" from="R"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
		</func>
		<func name="msgsnd" return="int_t" ada_type="procedure" rname="R" ada_name="Msgsnd" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/msg.h"/>
			</includes>
			<c_arg   name="msgqid" type="int_t" from="Msgqid"/>
			<c_arg   name="msgp"   type="System.Address" from="Msgr'Address"/>
			<c_arg   name="msgsz"  type="size_t" from="Msg'Length"/>
			<c_arg   name="msgflg" type="uint_t" from="Msgflg"/>
			<ada_arg name="Msgqid" io="in" type="int_t"/>
			<ada_arg name="Msgtyp" io="in" type="long_t"/>
			<ada_arg name="Msg"    io="in" type="uchar_array"/>
			<ada_arg name="Msgflg" io="in" type="uint_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<declare text="type Msgr_Type is"/>
			<declare text="   record"/>
			<declare text="      Mtype :   long_t;"/>
			<declare text="      Mtext :   uchar_array(0..Msg'Length-1);" />
			<declare text="   end record;"/>
			<declare text="Msgr : Msgr_Type := ( Msgtyp, Msg );" />
		</func>
		<func name="msgrcv" return="int_t" ada_type="procedure" rname="R" ada_name="Msgrcv" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/msg.h"/>
			</includes>
			<c_arg   name="msgqid" type="int_t" from="Msgqid"/>
			<c_arg   name="msgp"   type="System.Address" from="Msgr'Address"/>
			<c_arg   name="msgsz"  type="size_t" from="Msg'Length"/>
			<c_arg   name="msgtyp" type="long_t" from="Msgtyp"/>
			<c_arg   name="msgflg" type="uint_t" from="Msgflg"/>
			<ada_arg name="Msgqid" io="in" type="int_t"/>
			<ada_arg name="Msgtyp" io="in out" type="long_t" from="Msgr.Mtype"/>
			<ada_arg name="Msg"    io="out" type="uchar_array" from="Msgr.Mtext"/>
			<ada_arg name="Msgflg" io="in" type="uint_t"/>
			<ada_arg name="Msglen" io="out" type="Natural" from="To_Count(R)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<declare text="type Msgr_Type is"/>
			<declare text="   record"/>
			<declare text="      Mtype :   long_t;"/>
			<declare text="      Mtext :   uchar_array(0..Msg'Length-1);" />
			<declare text="   end record;"/>
			<declare text="Msgr : Msgr_Type;" />
		</func>
		<func name="semctl" return="int_t" ada_type="procedure" rname="R" ada_name="Semctl" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/sem.h"/>
			</includes>
			<c_arg   name="semid" type="int_t" from="Semid"/>
			<c_arg	 name="semnum" type="int_t" from="Semnum"/>
			<c_arg   name="cmd"   type="ipccmd_t" from="Cmd"/>
			<c_arg	 name="buf"   type="System.Address" from="Buf'Address"/>
			<ada_arg name="Semid" io="in" type="int_t"/>
			<ada_arg name="Cmd"   io="in" type="ipccmd_t"/>
			<ada_arg name="Semnum" io="in" type="int_t"/>
			<ada_arg name="Buf"   io="out" type="s_semid_ds" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<cases name="Cmd">
				<case name="IPC_STAT"/>
				<case name="SEM_STAT"/>
			</cases>
		</func>
		<func name="semctl" return="int_t" ada_type="procedure" rname="R" ada_name="Semctl_Set" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/sem.h"/>
			</includes>
			<c_arg   name="msqid" type="int_t" from="Semid"/>
			<c_arg	 name="semnum" type="int_t" from="0"/>
			<c_arg   name="cmd"   type="ipccmd_t" from="Cmd"/>
			<c_arg	 name="buf"   type="System.Address" from="Buf'Address"/>
			<ada_arg name="Semid" io="in" type="int_t"/>
			<ada_arg name="Cmd"   io="in" type="ipccmd_t"/>
			<ada_arg name="Buf"   io="in" type="s_semid_ds"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<cases name="Cmd">
				<case name="IPC_SET"/>
				<case name="IPC_RMID"/>
			</cases>
		</func>
		<func name="semctl" return="int_t" ada_type="procedure" rname="R" ada_name="Semctl_Get" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/msg.h"/>
			</includes>
			<c_arg   name="semid" type="int_t" from="Semid"/>
			<c_arg	 name="semnum" type="int_t" from="0"/>
			<c_arg   name="cmd"   type="ipccmd_t" from="Cmd"/>
			<c_arg	 name="buf"   type="System.Address" from="Buf'Address"/>
			<ada_arg name="Semid" io="in" type="int_t"/>
			<ada_arg name="Cmd"   io="in" type="ipccmd_t"/>
			<ada_arg name="Buf"   io="out" type="s_seminfo" from="implied"/>
			<ada_arg name="Hi_X"  io="out" type="int_t" from="R"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<cases name="Cmd">
				<case name="IPC_INFO"/>
				<case name="SEM_INFO"/>
			</cases>
		</func>
		<func name="semctl" return="int_t" ada_type="procedure" rname="R" ada_name="Semctl_Get" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/sem.h"/>
			</includes>
			<c_arg   name="semid" type="int_t" from="Semid"/>
			<c_arg	 name="semnum" type="int_t" from="0"/>
			<c_arg   name="cmd"   type="ipccmd_t" from="Cmd"/>
			<c_arg	 name="buf"   type="System.Address" from="Buf'Address"/>
			<ada_arg name="Semid" io="in" type="int_t"/>
			<ada_arg name="Cmd"   io="in" type="ipccmd_t"/>
			<ada_arg name="Buf"   io="out" type="ushort_array" from="implied"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<declare text="-- Warning: First find out how many semaphore values will be returned"/>
			<declare text="--          so that you can be sure how large Buf should be!"/>
			<cases name="Cmd">
				<case name="IPC_GETALL"/>
			</cases>
		</func>
		<func name="semctl" return="int_t" ada_type="procedure" rname="R" ada_name="Semctl_Get" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/sem.h"/>
			</includes>
			<c_arg   name="semid" type="int_t" from="Semid"/>
			<c_arg	 name="semnum" type="int_t" from="0"/>
			<c_arg   name="cmd"   type="ipccmd_t" from="Cmd"/>
			<ada_arg name="Semid" io="in" type="int_t"/>
			<ada_arg name="Cmd"   io="in" type="ipccmd_t"/>
			<ada_arg name="Count_Val"  io="out" type="int_t" from="R"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<cases name="Cmd" on_error="Count_Val := 0">
				<case name="IPC_GETNCNT"/>
				<case name="IPC_GETVAL"/>
				<case name="IPC_GETZCNT"/>
			</cases>
		</func>
		<func name="semctl" return="int_t" ada_type="procedure" rname="R" ada_name="Semctl_Get" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/sem.h"/>
			</includes>
			<c_arg   name="semid" type="int_t" from="Semid"/>
			<c_arg	 name="semnum" type="int_t" from="0"/>
			<c_arg   name="cmd"   type="ipccmd_t" from="Cmd"/>
			<ada_arg name="Semid" io="in" type="int_t"/>
			<ada_arg name="Cmd"   io="in" type="ipccmd_t"/>
			<ada_arg name="PID"   io="out" type="pid_t" from="pid_t(R)"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<cases name="Cmd" on_error="PID := 0">
				<case name="IPC_GETPID"/>
			</cases>
		</func>
		<func name="semctl" return="int_t" ada_type="procedure" rname="R" ada_name="Semctl_Set" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/sem.h"/>
			</includes>
			<c_arg   name="semid" type="int_t" from="Semid"/>
			<c_arg	 name="semnum" type="int_t" from="0"/>
			<c_arg   name="cmd"   type="ipccmd_t" from="Cmd"/>
			<c_arg	 name="buf"   type="System.Address" from="Buf'Address"/>
			<ada_arg name="Semid" io="in" type="int_t"/>
			<ada_arg name="Cmd"   io="in" type="ipccmd_t"/>
			<ada_arg name="Buf"   io="in" type="ushort_array"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<declare text="-- Warning: First find out how many semaphore values will be required"/>
			<declare text="--          so that you can be sure how large Buf should be!"/>
			<cases name="Cmd">
				<case name="IPC_SETALL"/>
			</cases>
		</func>
		<func name="semctl" return="int_t" ada_type="procedure" rname="R" ada_name="Semctl_Set" inline="1" os="Linux *">
			<includes>
				<include file="sys/types.h"/>
				<include file="sys/ipc.h"/>
				<include file="sys/sem.h"/>
			</includes>
			<c_arg   name="semid" type="int_t" from="Semid"/>
			<c_arg	 name="semnum" type="int_t" from="Semnum"/>
			<c_arg   name="cmd"   type="ipccmd_t" from="Cmd"/>
			<c_arg	 name="buf"   type="int_t" from="Val"/>
			<ada_arg name="Semid" io="in" type="int_t"/>
			<ada_arg name="Cmd"   io="in" type="ipccmd_t"/>
			<ada_arg name="Semnum" io="in" type="int_t"/>
			<ada_arg name="Val"   io="in" type="int_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(R)"/>
			<cases name="Cmd">
				<case name="IPC_SETVAL"/>
			</cases>
		</func>

<!--
       int semctl(int semid, int semnum, int cmd, ...);

       This  function  has  three  or  four arguments, depending on cmd.  When
       there are four, the fourth has the type union semun.  The calling  pro-
       gram must define this union as follows:

	   union semun {
	       int		val;	/* Value for SETVAL */
	       struct semid_ds *buf;	/* Buffer for IPC_STAT, IPC_SET */
	       unsigned short  *array;	/* Array for GETALL, SETALL */
	       struct seminfo  *__buf;	/* Buffer for IPC_INFO
					   (Linux-specific) */
	   };

       The semid_ds data structure is defined in <sys/sem.h> as follows:

	   struct semid_ds {
	       struct ipc_perm sem_perm;  /* Ownership and permissions */
	       time_t	       sem_otime; /* Last semop time */
	       time_t	       sem_ctime; /* Last change time */
	       unsigned short  sem_nsems; /* No. of semaphores in set */
	   };

       SETALL	 Set semval for all semaphores of  the	set  using  arg.array,
		 updating  also the sem_ctime member of the semid_ds structure
		 associated with the set.  Undo	 entries  (see	semop(2))  are
		 cleared  for  altered	semaphores  in	all processes.	If the
		 changes to semaphore values  would  permit  blocked  semop(2)
		 calls in other processes to proceed, then those processes are
		 woken up.  The argument semnum is ignored.  The calling  pro-
		 cess must have alter (write) permission on the semaphore set.

       SETVAL	 Set  the  value  of  semval  to  arg.val  for	the  semnum-th
		 semaphore  of	the set, updating also the sem_ctime member of
		 the semid_ds structure associated with the set.  Undo entries
		 are  cleared for altered semaphores in all processes.	If the
		 changes to semaphore values  would  permit  blocked  semop(2)
		 calls in other processes to proceed, then those processes are
		 woken up.  The calling process must have alter permission  on
		 the semaphore set.

RETURN VALUE
       On failure semctl() returns -1 with errno indicating the error.
       All other cmd values return 0 on success.
-->
<!--
	semctl(2)
	semget(2)
	semop(2)
	semtimedop(2)
	shmat(2)
	shmctl(2)
	shmdt(2)
	shmget(2)
-->
		<!-- Outstanding functions:
			setlogmasl : Linux - needs LOGS_MASK(pri) macro
			sigaction
			initgroups
			select
			reboot : Linux
			scandir(3) : Linux
			vm86plus_struct : Linux i386
		-->
	</section2>
</entities>
