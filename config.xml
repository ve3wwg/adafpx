<entities>
	<macro_constants>
		<set type="errno_t" format="%ld" genset="10">
			<includes>
				<include file="errno.h" os="Darwin 13.*.*"/>
				<include file="errno.h" os="default"/>
			</includes>
			<macro name="EPERM"/>
			<macro name="ENOENT"/>
			<macro name="ESRCH"/>
			<macro name="EINTR"/>
			<macro name="EIO"/>
			<macro name="ENXIO"/>
			<macro name="E2BIG"/>
			<macro name="ENOEXEC"/>
			<macro name="EBADF"/>
			<macro name="ECHILD"/>
			<macro name="EDEADLK"/>
			<macro name="ENOMEM"/>
			<macro name="EACCES"/>
			<macro name="EFAULT"/>
			<macro name="ENOTBLK"/>
			<macro name="EBUSY"/>
			<macro name="EEXIST"/>
			<macro name="EXDEV"/>
			<macro name="ENODEV"/>
			<macro name="ENOTDIR"/>
			<macro name="EISDIR"/>
			<macro name="EINVAL"/>
			<macro name="ENFILE"/>
			<macro name="EMFILE"/>
			<macro name="ENOTTY"/>
			<macro name="ETXTBSY"/>
			<macro name="EFBIG"/>
			<macro name="ENOSPC"/>
			<macro name="ESPIPE"/>
			<macro name="EROFS"/>
			<macro name="EMLINK"/>
			<macro name="EPIPE"/>
			<macro name="EDOM"/>
			<macro name="ERANGE"/>
			<macro name="EAGAIN"/>
			<macro name="EWOULDBLOCK"/>
			<macro name="EINPROGRESS"/>
			<macro name="EALREADY"/>
			<macro name="ENOTSOCK"/>
			<macro name="EDESTADDRREQ"/>
			<macro name="EMSGSIZE"/>
			<macro name="EPROTOTYPE"/>
			<macro name="ENOPROTOOPT"/>
			<macro name="EPROTONOSUPPORT"/>
			<macro name="ESOCKTNOSUPPORT"/>
			<macro name="ENOTSUP"/>
			<macro name="EOPNOTSUPP"/>
			<macro name="EPFNOSUPPORT"/>
			<macro name="EAFNOSUPPORT"/>
			<macro name="EADDRINUSE"/>
			<macro name="EADDRNOTAVAIL"/>
			<macro name="ENETDOWN"/>
			<macro name="ENETUNREACH"/>
			<macro name="ENETRESET"/>
			<macro name="ECONNABORTED"/>
			<macro name="ECONNRESET"/>
			<macro name="ENOBUFS"/>
			<macro name="EISCONN"/>
			<macro name="ENOTCONN"/>
			<macro name="ESHUTDOWN"/>
			<macro name="ETOOMANYREFS"/>
			<macro name="ETIMEDOUT"/>
			<macro name="ECONNREFUSED"/>
			<macro name="ELOOP"/>
			<macro name="ENAMETOOLONG"/>
			<macro name="EHOSTDOWN"/>
			<macro name="EHOSTUNREACH"/>
			<macro name="ENOTEMPTY"/>
			<macro name="EPROCLIM"/>
			<macro name="EUSERS"/>
			<macro name="EDQUOT"/>
			<macro name="ESTALE"/>
			<macro name="EREMOTE"/>
			<macro name="EBADRPC"/>
			<macro name="ERPCMISMATCH"/>
			<macro name="EPROGUNAVAIL"/>
			<macro name="EPROGMISMATCH"/>
			<macro name="EPROCUNAVAIL"/>
			<macro name="ENOLCK"/>
			<macro name="ENOSYS"/>
			<macro name="EFTYPE"/>
			<macro name="EAUTH"/>
			<macro name="ENEEDAUTH"/>
			<macro name="EPWROFF"/>
			<macro name="EDEVERR"/>
			<macro name="EOVERFLOW"/>
			<macro name="EBADEXEC"/>
			<macro name="EBADARCH"/>
			<macro name="ESHLIBVERS"/>
			<macro name="EBADMACHO"/>
			<macro name="ECANCELED"/>
			<macro name="EIDRM"/>
			<macro name="ENOMSG"/>
			<macro name="EILSEQ"/>
			<macro name="ENOATTR"/>
			<macro name="EBADMSG"/>
			<macro name="EMULTIHOP"/>
			<macro name="ENODATA"/>
			<macro name="ENOLINK"/>
			<macro name="ENOSR"/>
			<macro name="ENOSTR"/>
			<macro name="EPROTO"/>
			<macro name="ETIME"/>
			<macro name="ENOPOLICY"/>
			<macro name="ENOTRECOVERABLE"/>
			<macro name="EOWNERDEAD"/>
			<macro name="ELAST"/>
		</set>
		<set type="fcntl_t" genset="20">
			<includes>
				<include file="fcntl.h" os="default"/>
			</includes>
			<macro name="F_DUPFD"/>
			<macro name="F_DUPFD_CLOEXEC"/>
			<macro name="F_GETFD"/>
			<macro name="F_SETFD"/>
			<macro name="F_GETFL"/>
			<macro name="F_SETFL"/>
			<macro name="F_GETOWN"/>
			<macro name="F_SETOWN"/>
			<macro name="F_GETPATH"/>
			<macro name="F_PREALLOCATE"/>
			<macro name="F_SETSIZE"/>
			<macro name="F_RDADVISE"/>
			<macro name="F_RDAHEAD"/>
			<macro name="F_READBOOTSTRAP"/>
			<macro name="F_WRITEBOOTSTRAP"/>
			<macro name="F_NOCACHE"/>
			<macro name="F_LOG2PHYS"/>
			<macro name="F_LOG2PHYS_EXT"/>
			<macro name="F_FULLFSYNC"/>
			<macro name="F_SETNOSIGPIPE"/>
			<macro name="F_GETNOSIGPIPE"/>
			<macro name="F_GETLK"/>
			<macro name="F_SETLK"/>
			<macro name="F_SETLKW"/>
			<macro name="F_ALLOCATECONTIG"/>
			<macro name="F_ALLOCATEALL"/>
		</set>
		<set type="int_t" genset="30">
			<includes>
				<include file="sys/wait.h" os="default"/>
			</includes>
			<macro name="WNOHANG"/>
			<macro name="WUNTRACED"/>
			<macro name="WCONTINUED"/>
		</set>
		<set type = "mode_t" genset="40">
			<includes>
				<include file="sys/stat.h" os="default"/>
			</includes>
			<macro name="S_IRWXU"/>
			<macro name="S_IRUSR"/>
			<macro name="S_IWUSR"/>
			<macro name="S_IXUSR"/>
			<macro name="S_IRWXG"/>
			<macro name="S_IRGRP"/>
			<macro name="S_IWGRP"/>
			<macro name="S_IXGRP"/>
			<macro name="S_IRWXO"/>
			<macro name="S_IROTH"/>
			<macro name="S_IWOTH"/>
			<macro name="S_IXOTH"/>
			<macro name="S_ISUID"/>
			<macro name="S_ISGID"/>
			<macro name="S_ISVTX"/>
		</set>
		<set type="whence_t" genset="50">
			<macro name="SEEK_SET"/>
			<macro name="SEEK_CUR"/>
			<macro name="SEEK_END"/>
		</set>
		<set type="mntflags_t" genset="60">
			<includes>
				<include file="sys/param.h" os="default"/>
				<include file="sys/mount.h" os="default"/>
			</includes>
			<macro name="MS_BIND"/>
			<macro name="MS_DIRSYNC"/>
			<macro name="MS_MANDLOCK"/>
			<macro name="MS_MOVE"/>
			<macro name="MS_NOATIME"/>
			<macro name="MS_NODEV"/>
			<macro name="MS_NODIRATIME"/>
			<macro name="MS_NOEXEC"/>
			<macro name="MS_NOSUID"/>
			<macro name="MS_RDONLY"/>
			<macro name="MS_RELATIME"/>
			<macro name="MS_REMOUNT"/>
			<macro name="MS_SILENT"/>
			<macro name="MS_STRICTATIME"/>
			<macro name="MS_SYNCHRONOUS"/>
			<macro name="MNT_FORCE"/>
			<macro name="MNT_DETACH"/>
			<macro name="MNT_EXPIRE"/>
			<macro name="MNT_RDONLY"/>
			<macro name="MNT_NOEXEC"/>
			<macro name="MNT_NOSUID"/>
			<macro name="MNT_NODEV"/>
			<macro name="MNT_UNION"/>
			<macro name="MNT_SYNCHRONOUS"/>
			<macro name="MNT_UPDATE"/>
			<macro name="MNT_RELOAD"/>
			<macro name="UMOUNT_NOFOLOW"/>
		</set>
		<set type="int_t" genset="70">
			<includes>
				<include file="sys/types.h" os="default"/>
				<include file="sys/ptrace.h" os="default"/>
			</includes>
			<macro name="PT_TRACE_ME"/>
			<macro name="PT_DENY_ATTACH"/>
			<macro name="PT_CONTINUE"/>
			<macro name="PT_STEP"/>
			<macro name="PT_KILL"/>
			<macro name="PT_ATTACH"/>
			<macro name="PT_DETACH"/>
		</set>
		<set type="amode_t" genset="80">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<macro name="R_OK"/>
			<macro name="W_OK"/>
			<macro name="F_OK"/>
		</set>
		<set type="int_t" genset="90">
			<includes>
				<include file="signal.h" os="default"/>
			</includes>
			<macro name="SIGHUP"/>
			<macro name="SIGINT"/>
			<macro name="SIGQUIT"/>
			<macro name="SIGILL"/>
			<macro name="SIGTRAP"/>
			<macro name="SIGABRT"/>
			<macro name="SIGPOLL"/>
			<macro name="SIGIOT"/>
			<macro name="SIGEMT"/>
			<macro name="SIGFPE"/>
			<macro name="SIGKILL"/>
			<macro name="SIGBUS"/>
			<macro name="SIGSEGV"/>
			<macro name="SIGSYS"/>
			<macro name="SIGPIPE"/>
			<macro name="SIGALRM"/>
			<macro name="SIGTERM"/>
			<macro name="SIGURG"/>
			<macro name="SIGSTOP"/>
			<macro name="SIGTSTP"/>
			<macro name="SIGCONT"/>
			<macro name="SIGCHLD"/>
			<macro name="SIGTTIN"/>
			<macro name="SIGTTOU"/>
			<macro name="SIGIO"/>
			<macro name="SIGXCPU"/>
			<macro name="SIGXFSZ"/>
			<macro name="SIGVTALRM"/>
			<macro name="SIGPROF"/>
			<macro name="SIGWINCH"/>
			<macro name="SIGINFO"/>
			<macro name="SIGUSR1"/>
			<macro name="SIGUSR2"/>
			<macro name="SIG_DFL"/>
			<macro name="SIG_IGN"/>
			<macro name="SIG_HOLD"/>
			<macro name="SIG_ERR"/>
		</set>
		<set type="int_t" genset="100">
			<includes>
				<include file="sys/param.h" os="default"/>
			</includes>
			<macro name="MAXPATHLEN"/>
		</set>
		<set type="int_t" genset="110">
			<includes>
				<include file="fcntl.h" os="default"/>
			</includes>
			<macro name="FD_CLOEXEC"/>
		</set>
		<set type="int_t" genset="120">
			<includes>
				<include file="sys/utsname.h" os="default"/>
			</includes>
			<macro name="SYS_NAMELEN" alt="_SYS_NAMELEN" />
		</set>
		<set type="mode_t" genset="130" format="16#%08X#">
			<includes>
				<include file="fcntl.h" os="default"/>
			</includes>
			<macro name="O_RDONLY" desc="Open for reading only"/>
			<macro name="O_WRONLY" desc="Open for writing only"/>
			<macro name="O_RDWR"  desc="Open for reading and writing"/>
			<macro name="O_NONBLOCK" desc="Do not block on open or for data to become available"/>
			<macro name="O_APPEND" desc="Append on each write"/>
			<macro name="O_CREAT" desc="Create file if it does not exist"/>
			<macro name="O_TRUNC" desc="Truncate size to 0"/>
			<macro name="O_EXCL" desc="Error if O_CREAT and the file exists"/>
			<macro name="O_SHLOCK" desc="Atomically obtain a shared lock"/>
			<macro name="O_EXLOCK" desc="Atomically obtain an exclusive lock"/>
			<macro name="O_NOFOLLOW" desc="Do not follow symlinks"/>
			<macro name="O_SYMLINK" desc="Allow open of symlinks"/>
			<macro name="O_EVTONLY" desc="Descriptor requested for event notifications only"/>
			<macro name="O_CLOEXEC" desc="Mark as close-on-exec"/>
		</set>
	</macro_constants>
	<basic_types genset="500">
		<type name="char"/>
		<type name="short"/>
		<type name="int"/>
		<type name="long"/>
		<type name="long long"/>
		<type name="void*"/>
	</basic_types>
	<posix_types genset="510">
		<includes>
			<include file="stdint.h" os="default"/>
			<include file="time.h" os="default"/>
			<include file="sys/times.h" os="default"/>
			<include file="sys/utsname.h" os="default"/>
			<include file="unistd.h" os="default"/>
			<include file="sys/types.h" os="default"/>
			<include file="sys/stat.h" os="default"/>
			<include file="sys/uio.h" os="default"/>
			<include file="sys/ptrace.h" os="default"/>
			<include file="sys/param.h" os="default"/>
			<include file="signal.h" os="default"/>
		</includes>
		<type name="off_t"/>
		<type name="size_t"/>
		<type name="ssize_t"/>
		<type name="mode_t"/>
		<type name="uid_t"/>
		<type name="gid_t"/>
		<type name="pid_t"/>
		<type name="time_t"/>
		<type name="dev_t"/>
		<type name="nlink_t"/>
		<type name="blkcnt_t"/>
		<type name="blksize_t"/>
		<type name="sig_t"/>
		<type name="clock_t"/>
		<type name="ino64_t" os="Darwin 12.*.*"/>
		<type name="ino64_t" os="Darwin 13.*.*"/>
	</posix_types>
	<section2 genset="600">
		<func name="open" return="int_t" ada_type="procedure" rname="Fd" ada_name="Open" inline="1">
			<includes>
				<include file="sys/types.h" os="default"/>
				<include file="sys/stat.h" os="default"/>
				<include file="fcntl.h" os="default"/>
			</includes>
			<c_arg name="path" type="System.Address" from="T1'Address"/>
			<c_arg name="oflags" type="int_t" from="OFlags"/>
			<ada_arg name="Path" io="in" type="String" temp="T1" tempval="C_String(Path)"/>
			<ada_arg name="OFlags" io="in" type="int_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Fd)"/>
		</func>
		<func name="open" return="int_t" ada_type="procedure" rname="Fd" ada_name="Open" inline="1">
			<includes>
				<include file="sys/types.h" os="default"/>
				<include file="sys/stat.h" os="default"/>
				<include file="fcntl.h" os="default"/>
			</includes>
			<c_arg name="path" type="System.Address" from="T1'Address"/>
			<c_arg name="oflags" type="int_t" from="OFlags"/>
			<c_arg name="mode" type="mode_t" from="Mode"/>
			<ada_arg name="Path" io="in" type="String" temp="T1" tempval="C_String(Path)"/>
			<ada_arg name="OFlags" io="in" type="int_t"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Fd)"/>
		</func>
		<func name="creat" return="int_t" ada_type="procedure" rname="Fd" ada_name="Create" inline="1">
			<includes>
				<include file="sys/types.h" os="default"/>
				<include file="sys/stat.h" os="default"/>
				<include file="fcntl.h" os="default"/>
			</includes>
			<c_arg name="path" type="System.Addresse" from="T1'Address"/>
			<c_arg name="mode" type="mode_t" from="Mode"/>
			<ada_arg name="Path" io="in" type="String" temp="T1" tempval="C_String(Path)"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Fd)"/>
		</func>
		<func name="close" return="int_t" ada_type="procedure" rname="Status" ada_name="Close" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="fd" type="int_t" from="Fd"/>
			<ada_arg name="Fd" io="in" type="int_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="dup" return="int_t" ada_type="procedure" rname="Fd" ada_name="Dup" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="fd" type="int_t" from="Fd"/>
			<ada_arg name="Fd" io="in" type="int_t"/>
			<ada_arg name="Fd2" io="out" type="int_t" from="Fd"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Fd)"/>
		</func>
		<func name="dup2" return="int_t" ada_type="procedure" rname="Status" ada_name="Dup2" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="fd" type="int_t" from="Fd"/>
			<c_arg name="fd2" type="int_t" from="Fd"/>
			<ada_arg name="Fd" io="in" type="int_t"/>
			<ada_arg name="Fd2" io="in" type="int_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="exit" return="" ada_type="procedure" rname="" ada_name="Sys_Exit" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="status" type="int_t" from="Status"/>
			<ada_arg name="Status" io="in" type="int_t"/>
		</func>
		<func name="_exit" altname="UX_exit" return="" ada_type="procedure" rname="" ada_name="Sys_Exit2" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="status" type="int_t" from="Status"/>
			<ada_arg name="Status" io="in" type="int_t"/>
		</func>
		<func name="fork" return="pid_t" ada_type="procedure" rname="P" ada_name="Fork" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<ada_arg name="PID" io="out" type="pid_t" from="P"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(PID)"/>
		</func>
		<func name="wait" return="pid_t" ada_type="procedure" rname="P" ada_name="Wait" inline="1">
			<includes>
				<include file="sys/types.h" os="default"/>
				<include file="sys/wait.h" os="default"/>
			</includes>
			<c_arg name="status" type="System.Address" from="S'Address"/>
			<ada_arg name="status" io="out" type="int_t" from="S"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(P)"/>
			<temp name="S" type="int_t" init="0"/>
		</func>
		<func name="waitpid" return="pid_t" ada_type="procedure" rname="P" ada_name="Wait_Pid" inline="1">
			<includes>
				<include file="sys/types.h" os="default"/>
				<include file="sys/wait.h" os="default"/>
			</includes>
			<c_arg name="pid" type="pid_t" from="PID"/>
			<c_arg name="status" type="System.Address" from="S'Address"/>
			<c_arg name="options" type="int_t" from="Options"/>
			<ada_arg name="PID" io="in" type="pid_t"/>
			<ada_arg name="Options" io="in" type="int_t"/>	
			<ada_arg name="status" io="out" type="int_t" from="S"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(P)"/>
			<temp name="S" type="int_t" init="0"/>
		</func>
		<func name="link" return="int_t" ada_type="procedure" rname="Status" ada_name="Link" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="path1" type="System.Address" from="C_Path1'Address"/>
			<c_arg name="path2" type="System.Address" from="C_Path2'Address"/>
			<ada_arg name="Path1" io="in" type="String"/>
			<ada_arg name="Path2" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="C_Path1" type="String" init="C_String(Path1)"/>
			<temp name="C_Path2" type="String" init="C_String(Path2)"/>
		</func>
		<func name="unlink" return="int_t" ada_type="procedure" rname="Status" ada_name="Unlink" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="path" type="System.Address" from="Temp'Address"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="Temp" type="String" init="C_String(Path)"/>
		</func>
		<func name="chdir" return="int_t" ada_type="procedure" rname="Status" ada_name="Chdir" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="path" type="System.Address" from="Temp'Address"/>
			<ada_arg name="Path" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="Temp" type="String" init="C_String(Path)"/>
		</func>
		<func name="fchdir" return="int_t" ada_type="procedure" rname="Status" ada_name="FChdir" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="fildes" type="int_t" from="Fildes"/>
			<ada_arg name="Fildes" io="in" type="int_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="time" return="" ada_type="procedure" rname="" ada_name="Time" inline="1">
			<includes>
				<include file="time.h" os="default"/>
			</includes>
			<c_arg name="t" type="System.Address" from="T'Address"/>
			<ada_arg name="Time" io="out" type="time_t" from="T"/>
			<temp name="T" type="time_t" init="0"/>
		</func>
		<func name="mknod" return="int_t" ada_type="procedure" rname="Status" ada_name="Mknod" inline="1">
			<includes>
				<include file="sys/unistd.h" os="default"/>
				<include file="sys/types.h" os="default"/>
				<include file="sys/stat.h" os="default"/>
				<include file="sys/fcntl.h" os="default"/>
			</includes>
			<c_arg name="pathname" type="System.Address" from="Temp'Address"/>
			<c_arg name="mode" type="mode_t" from="Mode"/>
			<c_arg name="dev" type="dev_t" from="Dev"/>
			<ada_arg name="Pathname" io="in" type="String"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
			<ada_arg name="Dev" io="in" type="dev_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="Temp" type="String" init="C_String(Pathname)"/>
		</func>
		<func name="chmod" return="int_t" ada_type="procedure" rname="Status" ada_name="Chmod" inline="1">
			<includes>
				<include file="sys/stat.h" os="default"/>
			</includes>
			<c_arg name="pathname" type="System.Address" from="Temp'Address"/>
			<c_arg name="mode" type="mode_t" from="Mode"/>
			<ada_arg name="Pathname" io="in" type="String"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="Temp" type="String" init="C_String(Pathname)"/>
		</func>
		<func name="fchmod" return="int_t" ada_type="procedure" rname="Status" ada_name="FChmod" inline="1">
			<includes>
				<include file="sys/stat.h" os="default"/>
			</includes>
			<c_arg name="fd" type="int_t" from="Fd"/>
			<c_arg name="mode" type="mode_t" from="Mode"/>
			<ada_arg name="Fd" io="in" type="int_t"/>
			<ada_arg name="Mode" io="in" type="mode_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="chown" return="int_t" ada_type="procedure" rname="Status" ada_name="Chown" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="pathname" type="System.Address" from="Temp'Address"/>
			<c_arg name="owner" type="uid_t" from="Owner"/>
			<c_arg name="group" type="gid_t" from="Group"/>
			<ada_arg name="Pathname" io="in" type="String"/>
			<ada_arg name="Owner" io="in" type="uid_t"/>
			<ada_arg name="Group" io="in" type="gid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="Temp" type="String" init="C_String(Pathname)"/>
		</func>
		<func name="fchown" return="int_t" ada_type="procedure" rname="Status" ada_name="FChown" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="fd" type="int_t" from="Fd"/>
			<c_arg name="owner" type="uid_t" from="Owner"/>
			<c_arg name="group" type="gid_t" from="Group"/>
			<ada_arg name="Fd" io="in" type="int_t"/>
			<ada_arg name="Owner" io="in" type="uid_t"/>
			<ada_arg name="Group" io="in" type="gid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="lchown" return="int_t" ada_type="procedure" rname="Status" ada_name="LChown" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="pathname" type="System.Address" from="Temp'Address"/>
			<c_arg name="owner" type="uid_t" from="Owner"/>
			<c_arg name="group" type="gid_t" from="Group"/>
			<ada_arg name="Pathname" io="in" type="String"/>
			<ada_arg name="Owner" io="in" type="uid_t"/>
			<ada_arg name="Group" io="in" type="gid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="Temp" type="String" init="C_String(Pathname)"/>
		</func>
		<func name="lseek" return="int_t" ada_type="procedure" rname="Status" ada_name="LSeek" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
				<include file="sys/types.h" os="default"/>
			</includes>
			<c_arg name="fd" type="int_t" from="Fd"/>
			<c_arg name="offset" type="offset_t" from="Offset"/>
			<c_arg name="whence" type="whence_t" from="Whence"/>
			<ada_arg name="Fd" io="in" type="int_t"/>
			<ada_arg name="Offset" io="in" type="offset_t"/>
			<ada_arg name="Whence" io="in" type="whence_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="getpid" return="pid_t" ada_type="procedure" rname="P" ada_name="Getpid" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
				<include file="sys/types.h" os="default"/>
			</includes>
			<ada_arg name="PID" io="out" type="pid_t" from="P"/>
		</func>
		<func name="getppid" return="pid_t" ada_type="procedure" rname="P" ada_name="Getppid" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
				<include file="sys/types.h" os="default"/>
			</includes>
			<ada_arg name="PID" io="out" type="pid_t" from="P"/>
		</func>
		<func name="getpgid" return="pid_t" ada_type="procedure" rname="P" ada_name="Getpgid" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="pid" type="pid_t" from="PID"/>
			<ada_arg name="PID" io="in" type="pid_t"/>
			<ada_arg name="PPID" io="out" type="pid_t" from="P"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(P)"/>
		</func>
		<func name="getpgrp" return="pid_t" ada_type="procedure" rname="P" ada_name="Getpgrp" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<ada_arg name="PID" io="out" type="pid_t" from="P"/>
		</func>
		<func name="setpgid" return="pid_t" ada_type="procedure" rname="Status" ada_name="Setpgid" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="pid" type="pid_t" from="PID"/>
			<c_arg name="pgid" type="pid_t" from="PGID"/>
			<ada_arg name="PID" io="in" type="pid_t"/>
			<ada_arg name="PPID" io="in" type="pid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="setpgrp" return="pid_t" ada_type="procedure" rname="Status" ada_name="Setpgrp" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
			</includes>
			<c_arg name="pid" type="pid_t" from="PID"/>
			<c_arg name="pgid" type="pid_t" from="PGID"/>
			<ada_arg name="PID" io="in" type="pid_t"/>
			<ada_arg name="PPID" io="in" type="pid_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
		</func>
		<func name="getgid" return="gid_t" ada_type="procedure" rname="G" ada_name="Getgid" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
				<include file="sys/types.h" os="default"/>
			</includes>
			<ada_arg name="GID" io="out" type="gid_t" from="G"/>
		</func>
		<func name="getegid" return="gid_t" ada_type="procedure" rname="G" ada_name="Getegid" inline="1">
			<includes>
				<include file="unistd.h" os="default"/>
				<include file="sys/types.h" os="default"/>
			</includes>
			<ada_arg name="GID" io="out" type="gid_t" from="G"/>
		</func>
		<func name="mount" return="int_t" ada_type="procedure" rname="Status" ada_name="Mount" inline="1">
			<includes>
				<include file="sys/mount.h" os="default"/>
			</includes>
			<c_arg name="source" type="System.Address" from="C_Source'Address"/>
			<c_arg name="target" type="System.Address" from="C_Target'Address"/>
			<c_arg name="filesystemtype" type="System'Address" from="C_FST'Address"/>
			<c_arg name="mountflags" type="uint_t" from="Mount_Flags"/>
			<c_arg name="data" type="System'Address" from="Data"/>
			<ada_arg name="Source" io="in" type="String"/>
			<ada_arg name="Target" io="in" type="String"/>
			<ada_arg name="Filesystem_Type" io="in" type="String"/>
			<ada_arg name="Mount_Flags" io="in" type="uint_t"/>
			<ada_arg name="Data" io="in" type="System.Address"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="C_Source" type="String" init="C_String(Source)"/>
			<temp name="C_Target" type="String" init="C_String(Target)"/>
			<temp name="C_FST" type="String" init="C_String(Filesystem_Type)"/>
		</func>
		<func name="umount" return="int_t" ada_type="procedure" rname="Status" ada_name="UMount" inline="1">
			<includes>
				<include file="sys/mount.h" os="default"/>
			</includes>
			<c_arg name="target" type="System.Address" from="C_Target'Address"/>
			<ada_arg name="Target" io="in" type="String"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="C_Target" type="String" init="C_String(Target)"/>
		</func>
		<func name="umount2" return="int_t" ada_type="procedure" rname="Status" ada_name="UMount2" inline="1">
			<includes>
				<include file="sys/mount.h" os="default"/>
			</includes>
			<c_arg name="target" type="System.Address" from="C_Target'Address"/>
			<c_arg name="flags" type="int_t" from="Flags"/>
			<ada_arg name="Target" io="in" type="String"/>
			<ada_arg name="Flags" io="in" type="int_t"/>
			<ada_arg name="Error" io="out" type="errno_t" from="C_Error(Status)"/>
			<temp name="C_Target" type="String" init="C_String(Target)"/>
		</func>
	</section2>
</entities>
